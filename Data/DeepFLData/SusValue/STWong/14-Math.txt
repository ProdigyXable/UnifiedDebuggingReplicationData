org.apache.commons.math3.fitting.PolynomialFitter:<init>(Lorg/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer;)V 1.0
org.apache.commons.math3.analysis.polynomials.PolynomialFunction$Parametric:<init>()V 1.0
org.apache.commons.math3.fitting.CurveFitter$TheoreticalValuesFunction$1:<init>(Lorg/apache/commons/math3/fitting/CurveFitter$TheoreticalValuesFunction;)V 1.0
org.apache.commons.math3.fitting.CurveFitter$TheoreticalValuesFunction$2:<init>(Lorg/apache/commons/math3/fitting/CurveFitter$TheoreticalValuesFunction;)V 1.0
org.apache.commons.math3.fitting.CurveFitter$TheoreticalValuesFunction:<init>(Lorg/apache/commons/math3/fitting/CurveFitter;Lorg/apache/commons/math3/analysis/ParametricUnivariateFunction;)V 1.0
org.apache.commons.math3.fitting.CurveFitter$TheoreticalValuesFunction:getModelFunction()Lorg/apache/commons/math3/optim/nonlinear/vector/ModelFunction; 1.0
org.apache.commons.math3.fitting.CurveFitter$TheoreticalValuesFunction:getModelFunctionJacobian()Lorg/apache/commons/math3/optim/nonlinear/vector/ModelFunctionJacobian; 1.0
org.apache.commons.math3.fitting.WeightedObservedPoint:<init>(DDD)V 1.0
org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer:<init>()V 1.0
org.apache.commons.math3.analysis.polynomials.PolynomialFunction:value(D)D 1.0
org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer:<init>(DDDDD)V 1.0
org.apache.commons.math3.optim.nonlinear.vector.ModelFunctionJacobian:<init>(Lorg/apache/commons/math3/analysis/MultivariateMatrixFunction;)V 1.0
org.apache.commons.math3.optim.nonlinear.vector.ModelFunction:<init>(Lorg/apache/commons/math3/analysis/MultivariateVectorFunction;)V 1.0
org.apache.commons.math3.optim.nonlinear.vector.Target:<init>([D)V 1.0
org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer:optimize([Lorg/apache/commons/math3/optim/OptimizationData;)Lorg/apache/commons/math3/optim/PointVectorValuePair; 1.0
org.apache.commons.math3.optim.nonlinear.vector.JacobianMultivariateVectorOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V 1.0
org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V 1.0
org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V 1.0
org.apache.commons.math3.optim.InitialGuess:<init>([D)V 1.0
org.apache.commons.math3.optim.BaseMultivariateOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V 1.0
org.apache.commons.math3.optim.BaseOptimizer$MaxEvalCallback:<init>(Lorg/apache/commons/math3/optim/BaseOptimizer$1;)V 1.0
org.apache.commons.math3.optim.BaseOptimizer$MaxIterCallback:<init>(Lorg/apache/commons/math3/optim/BaseOptimizer$1;)V 1.0
org.apache.commons.math3.linear.MatrixUtils:checkMatrixIndex(Lorg/apache/commons/math3/linear/AnyMatrix;II)V 1.0
org.apache.commons.math3.linear.RealLinearOperator:<init>()V 1.0
org.apache.commons.math3.fitting.PolynomialFitter:fit([D)[D 1.0
org.apache.commons.math3.fitting.CurveFitter:fit(Lorg/apache/commons/math3/analysis/ParametricUnivariateFunction;[D)[D 1.0
org.apache.commons.math3.fitting.CurveFitter:fit(ILorg/apache/commons/math3/analysis/ParametricUnivariateFunction;[D)[D 1.0
org.apache.commons.math3.fitting.WeightedObservedPoint:getWeight()D 1.0
org.apache.commons.math3.fitting.CurveFitter:addObservedPoint(DDD)V 1.0
org.apache.commons.math3.fitting.WeightedObservedPoint:getY()D 1.0
org.apache.commons.math3.fitting.CurveFitter:<init>(Lorg/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer;)V 1.0
org.apache.commons.math3.linear.BlockRealMatrix:copy()Lorg/apache/commons/math3/linear/BlockRealMatrix; 1.0
org.apache.commons.math3.analysis.polynomials.PolynomialFunction:evaluate([DD)D 1.0
org.apache.commons.math3.linear.BlockRealMatrix:setEntry(IID)V 1.0
org.apache.commons.math3.analysis.polynomials.PolynomialFunction:<init>([D)V 1.0
org.apache.commons.math3.optim.nonlinear.vector.Weight:<init>([D)V 1.0
org.apache.commons.math3.optim.nonlinear.vector.Weight:getWeight()Lorg/apache/commons/math3/linear/RealMatrix; 1.0
org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer:parseOptimizationData([Lorg/apache/commons/math3/optim/OptimizationData;)V 1.0
org.apache.commons.math3.linear.BlockRealMatrix:<init>(II)V 1.0
org.apache.commons.math3.linear.BlockRealMatrix:createBlocksLayout(II)[[D 1.0
org.apache.commons.math3.optim.MaxEval:<init>(I)V 1.0
org.apache.commons.math3.optim.BaseOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V 1.0
org.apache.commons.math3.linear.BlockRealMatrix:getColumnDimension()I 1.0
org.apache.commons.math3.linear.BlockRealMatrix:getRowDimension()I 1.0
org.apache.commons.math3.linear.BlockRealMatrix:blockWidth(I)I 1.0
org.apache.commons.math3.linear.MatrixUtils:createRealMatrix(II)Lorg/apache/commons/math3/linear/RealMatrix; 1.0
org.apache.commons.math3.linear.AbstractRealMatrix:<init>(II)V 1.0
org.apache.commons.math3.linear.MatrixUtils:checkRowIndex(Lorg/apache/commons/math3/linear/AnyMatrix;I)V 1.0
org.apache.commons.math3.linear.MatrixUtils:checkColumnIndex(Lorg/apache/commons/math3/linear/AnyMatrix;I)V 1.0
org.apache.commons.math3.util.FastMath:min(II)I 1.0
org.apache.commons.math3.util.Incrementor:<init>(ILorg/apache/commons/math3/util/Incrementor$MaxCountExceededCallback;)V 1.0
org.apache.commons.math3.util.MathUtils:checkNotNull(Ljava/lang/Object;)V 1.0
org.apache.commons.math3.fitting.PolynomialFitter:<init>(Lorg/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer;)V 1.0
org.apache.commons.math3.fitting.PolynomialFitter:fit([D)[D 1.0
org.apache.commons.math3.analysis.polynomials.PolynomialFunction$Parametric:<init>()V 1.0
org.apache.commons.math3.fitting.CurveFitter:fit(Lorg/apache/commons/math3/analysis/ParametricUnivariateFunction;[D)[D 1.0
org.apache.commons.math3.fitting.CurveFitter$TheoreticalValuesFunction$1:<init>(Lorg/apache/commons/math3/fitting/CurveFitter$TheoreticalValuesFunction;)V 1.0
org.apache.commons.math3.fitting.CurveFitter$TheoreticalValuesFunction$2:<init>(Lorg/apache/commons/math3/fitting/CurveFitter$TheoreticalValuesFunction;)V 1.0
org.apache.commons.math3.fitting.CurveFitter$TheoreticalValuesFunction:<init>(Lorg/apache/commons/math3/fitting/CurveFitter;Lorg/apache/commons/math3/analysis/ParametricUnivariateFunction;)V 1.0
org.apache.commons.math3.fitting.CurveFitter$TheoreticalValuesFunction:getModelFunction()Lorg/apache/commons/math3/optim/nonlinear/vector/ModelFunction; 1.0
org.apache.commons.math3.fitting.CurveFitter$TheoreticalValuesFunction:getModelFunctionJacobian()Lorg/apache/commons/math3/optim/nonlinear/vector/ModelFunctionJacobian; 1.0
org.apache.commons.math3.fitting.CurveFitter:fit(ILorg/apache/commons/math3/analysis/ParametricUnivariateFunction;[D)[D 1.0
org.apache.commons.math3.fitting.WeightedObservedPoint:getWeight()D 1.0
org.apache.commons.math3.fitting.CurveFitter:addObservedPoint(DDD)V 1.0
org.apache.commons.math3.fitting.WeightedObservedPoint:getY()D 1.0
org.apache.commons.math3.fitting.WeightedObservedPoint:<init>(DDD)V 1.0
org.apache.commons.math3.fitting.CurveFitter:<init>(Lorg/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer;)V 1.0
org.apache.commons.math3.linear.BlockRealMatrix:copy()Lorg/apache/commons/math3/linear/BlockRealMatrix; 1.0
org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer:<init>()V 1.0
org.apache.commons.math3.analysis.polynomials.PolynomialFunction:value(D)D 1.0
org.apache.commons.math3.analysis.polynomials.PolynomialFunction:evaluate([DD)D 1.0
org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer:<init>(DDDDD)V 1.0
org.apache.commons.math3.linear.BlockRealMatrix:setEntry(IID)V 1.0
org.apache.commons.math3.analysis.polynomials.PolynomialFunction:<init>([D)V 1.0
org.apache.commons.math3.optim.nonlinear.vector.ModelFunctionJacobian:<init>(Lorg/apache/commons/math3/analysis/MultivariateMatrixFunction;)V 1.0
org.apache.commons.math3.optim.nonlinear.vector.ModelFunction:<init>(Lorg/apache/commons/math3/analysis/MultivariateVectorFunction;)V 1.0
org.apache.commons.math3.optim.nonlinear.vector.Target:<init>([D)V 1.0
org.apache.commons.math3.optim.nonlinear.vector.Weight:<init>([D)V 1.0
org.apache.commons.math3.optim.nonlinear.vector.Weight:getWeight()Lorg/apache/commons/math3/linear/RealMatrix; 1.0
org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer:optimize([Lorg/apache/commons/math3/optim/OptimizationData;)Lorg/apache/commons/math3/optim/PointVectorValuePair; 1.0
org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer:parseOptimizationData([Lorg/apache/commons/math3/optim/OptimizationData;)V 1.0
org.apache.commons.math3.optim.nonlinear.vector.JacobianMultivariateVectorOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V 1.0
org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V 1.0
org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V 1.0
org.apache.commons.math3.linear.BlockRealMatrix:<init>(II)V 1.0
org.apache.commons.math3.linear.BlockRealMatrix:createBlocksLayout(II)[[D 1.0
org.apache.commons.math3.optim.InitialGuess:<init>([D)V 1.0
org.apache.commons.math3.optim.MaxEval:<init>(I)V 1.0
org.apache.commons.math3.optim.BaseMultivariateOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V 1.0
org.apache.commons.math3.optim.BaseOptimizer$MaxEvalCallback:<init>(Lorg/apache/commons/math3/optim/BaseOptimizer$1;)V 1.0
org.apache.commons.math3.optim.BaseOptimizer$MaxIterCallback:<init>(Lorg/apache/commons/math3/optim/BaseOptimizer$1;)V 1.0
org.apache.commons.math3.optim.BaseOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V 1.0
org.apache.commons.math3.linear.BlockRealMatrix:getColumnDimension()I 1.0
org.apache.commons.math3.linear.BlockRealMatrix:getRowDimension()I 1.0
org.apache.commons.math3.linear.BlockRealMatrix:blockWidth(I)I 1.0
org.apache.commons.math3.linear.MatrixUtils:createRealMatrix(II)Lorg/apache/commons/math3/linear/RealMatrix; 1.0
org.apache.commons.math3.linear.MatrixUtils:checkMatrixIndex(Lorg/apache/commons/math3/linear/AnyMatrix;II)V 1.0
org.apache.commons.math3.linear.AbstractRealMatrix:<init>(II)V 1.0
org.apache.commons.math3.linear.MatrixUtils:checkRowIndex(Lorg/apache/commons/math3/linear/AnyMatrix;I)V 1.0
org.apache.commons.math3.linear.MatrixUtils:checkColumnIndex(Lorg/apache/commons/math3/linear/AnyMatrix;I)V 1.0
org.apache.commons.math3.util.FastMath:min(II)I 1.0
org.apache.commons.math3.linear.RealLinearOperator:<init>()V 1.0
org.apache.commons.math3.util.Incrementor:<init>(ILorg/apache/commons/math3/util/Incrementor$MaxCountExceededCallback;)V 1.0
org.apache.commons.math3.util.MathUtils:checkNotNull(Ljava/lang/Object;)V 1.0
org.apache.commons.math3.fitting.PolynomialFitter:<init>(Lorg/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer;)V 1.0
org.apache.commons.math3.fitting.PolynomialFitter:fit([D)[D 1.0
org.apache.commons.math3.analysis.polynomials.PolynomialFunction$Parametric:<init>()V 1.0
org.apache.commons.math3.fitting.CurveFitter:fit(Lorg/apache/commons/math3/analysis/ParametricUnivariateFunction;[D)[D 1.0
org.apache.commons.math3.fitting.CurveFitter$TheoreticalValuesFunction$1:<init>(Lorg/apache/commons/math3/fitting/CurveFitter$TheoreticalValuesFunction;)V 1.0
org.apache.commons.math3.fitting.CurveFitter$TheoreticalValuesFunction$2:<init>(Lorg/apache/commons/math3/fitting/CurveFitter$TheoreticalValuesFunction;)V 1.0
org.apache.commons.math3.fitting.CurveFitter$TheoreticalValuesFunction:<init>(Lorg/apache/commons/math3/fitting/CurveFitter;Lorg/apache/commons/math3/analysis/ParametricUnivariateFunction;)V 1.0
org.apache.commons.math3.fitting.CurveFitter$TheoreticalValuesFunction:getModelFunction()Lorg/apache/commons/math3/optim/nonlinear/vector/ModelFunction; 1.0
org.apache.commons.math3.fitting.CurveFitter$TheoreticalValuesFunction:getModelFunctionJacobian()Lorg/apache/commons/math3/optim/nonlinear/vector/ModelFunctionJacobian; 1.0
org.apache.commons.math3.fitting.CurveFitter:fit(ILorg/apache/commons/math3/analysis/ParametricUnivariateFunction;[D)[D 1.0
org.apache.commons.math3.fitting.WeightedObservedPoint:getWeight()D 1.0
org.apache.commons.math3.fitting.CurveFitter:addObservedPoint(DDD)V 1.0
org.apache.commons.math3.fitting.WeightedObservedPoint:getY()D 1.0
org.apache.commons.math3.fitting.WeightedObservedPoint:<init>(DDD)V 1.0
org.apache.commons.math3.fitting.CurveFitter:<init>(Lorg/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer;)V 1.0
org.apache.commons.math3.linear.BlockRealMatrix:copy()Lorg/apache/commons/math3/linear/BlockRealMatrix; 1.0
org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer:<init>()V 1.0
org.apache.commons.math3.analysis.polynomials.PolynomialFunction:value(D)D 1.0
org.apache.commons.math3.analysis.polynomials.PolynomialFunction:evaluate([DD)D 1.0
org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer:<init>(DDDDD)V 1.0
org.apache.commons.math3.linear.BlockRealMatrix:setEntry(IID)V 1.0
org.apache.commons.math3.analysis.polynomials.PolynomialFunction:<init>([D)V 1.0
org.apache.commons.math3.optim.nonlinear.vector.ModelFunctionJacobian:<init>(Lorg/apache/commons/math3/analysis/MultivariateMatrixFunction;)V 1.0
org.apache.commons.math3.optim.nonlinear.vector.ModelFunction:<init>(Lorg/apache/commons/math3/analysis/MultivariateVectorFunction;)V 1.0
org.apache.commons.math3.optim.nonlinear.vector.Target:<init>([D)V 1.0
org.apache.commons.math3.optim.nonlinear.vector.Weight:<init>([D)V 1.0
org.apache.commons.math3.optim.nonlinear.vector.Weight:getWeight()Lorg/apache/commons/math3/linear/RealMatrix; 1.0
org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer:optimize([Lorg/apache/commons/math3/optim/OptimizationData;)Lorg/apache/commons/math3/optim/PointVectorValuePair; 1.0
org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer:parseOptimizationData([Lorg/apache/commons/math3/optim/OptimizationData;)V 1.0
org.apache.commons.math3.optim.nonlinear.vector.JacobianMultivariateVectorOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V 1.0
org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V 1.0
org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V 1.0
org.apache.commons.math3.linear.BlockRealMatrix:<init>(II)V 1.0
org.apache.commons.math3.linear.BlockRealMatrix:createBlocksLayout(II)[[D 1.0
org.apache.commons.math3.optim.InitialGuess:<init>([D)V 1.0
org.apache.commons.math3.optim.MaxEval:<init>(I)V 1.0
org.apache.commons.math3.optim.BaseMultivariateOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V 1.0
org.apache.commons.math3.optim.BaseOptimizer$MaxEvalCallback:<init>(Lorg/apache/commons/math3/optim/BaseOptimizer$1;)V 1.0
org.apache.commons.math3.optim.BaseOptimizer$MaxIterCallback:<init>(Lorg/apache/commons/math3/optim/BaseOptimizer$1;)V 1.0
org.apache.commons.math3.optim.BaseOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V 1.0
org.apache.commons.math3.linear.BlockRealMatrix:getColumnDimension()I 1.0
org.apache.commons.math3.linear.BlockRealMatrix:getRowDimension()I 1.0
org.apache.commons.math3.linear.BlockRealMatrix:blockWidth(I)I 1.0
org.apache.commons.math3.linear.MatrixUtils:createRealMatrix(II)Lorg/apache/commons/math3/linear/RealMatrix; 1.0
org.apache.commons.math3.linear.MatrixUtils:checkMatrixIndex(Lorg/apache/commons/math3/linear/AnyMatrix;II)V 1.0
org.apache.commons.math3.linear.AbstractRealMatrix:<init>(II)V 1.0
org.apache.commons.math3.linear.MatrixUtils:checkRowIndex(Lorg/apache/commons/math3/linear/AnyMatrix;I)V 1.0
org.apache.commons.math3.linear.MatrixUtils:checkColumnIndex(Lorg/apache/commons/math3/linear/AnyMatrix;I)V 1.0
org.apache.commons.math3.util.FastMath:min(II)I 1.0
org.apache.commons.math3.linear.RealLinearOperator:<init>()V 1.0
org.apache.commons.math3.util.Incrementor:<init>(ILorg/apache/commons/math3/util/Incrementor$MaxCountExceededCallback;)V 1.0
org.apache.commons.math3.util.MathUtils:checkNotNull(Ljava/lang/Object;)V 1.0
org.apache.commons.math3.fitting.PolynomialFitter:fit([D)[D 1.0
org.apache.commons.math3.fitting.CurveFitter:fit(Lorg/apache/commons/math3/analysis/ParametricUnivariateFunction;[D)[D 1.0
org.apache.commons.math3.fitting.PolynomialFitter:<init>(Lorg/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer;)V 1.0
org.apache.commons.math3.analysis.polynomials.PolynomialFunction$Parametric:<init>()V 1.0
org.apache.commons.math3.fitting.CurveFitter$TheoreticalValuesFunction$1:<init>(Lorg/apache/commons/math3/fitting/CurveFitter$TheoreticalValuesFunction;)V 1.0
org.apache.commons.math3.fitting.CurveFitter$TheoreticalValuesFunction$2:<init>(Lorg/apache/commons/math3/fitting/CurveFitter$TheoreticalValuesFunction;)V 1.0
org.apache.commons.math3.fitting.CurveFitter$TheoreticalValuesFunction:<init>(Lorg/apache/commons/math3/fitting/CurveFitter;Lorg/apache/commons/math3/analysis/ParametricUnivariateFunction;)V 1.0
org.apache.commons.math3.fitting.CurveFitter$TheoreticalValuesFunction:getModelFunction()Lorg/apache/commons/math3/optim/nonlinear/vector/ModelFunction; 1.0
org.apache.commons.math3.fitting.CurveFitter$TheoreticalValuesFunction:getModelFunctionJacobian()Lorg/apache/commons/math3/optim/nonlinear/vector/ModelFunctionJacobian; 1.0
org.apache.commons.math3.fitting.CurveFitter:fit(ILorg/apache/commons/math3/analysis/ParametricUnivariateFunction;[D)[D 1.0
org.apache.commons.math3.fitting.WeightedObservedPoint:getWeight()D 1.0
org.apache.commons.math3.fitting.CurveFitter:addObservedPoint(DDD)V 1.0
org.apache.commons.math3.fitting.WeightedObservedPoint:getY()D 1.0
org.apache.commons.math3.fitting.WeightedObservedPoint:<init>(DDD)V 1.0
org.apache.commons.math3.fitting.CurveFitter:<init>(Lorg/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer;)V 1.0
org.apache.commons.math3.linear.BlockRealMatrix:copy()Lorg/apache/commons/math3/linear/BlockRealMatrix; 1.0
org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer:<init>()V 1.0
org.apache.commons.math3.analysis.polynomials.PolynomialFunction:value(D)D 1.0
org.apache.commons.math3.analysis.polynomials.PolynomialFunction:evaluate([DD)D 1.0
org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer:<init>(DDDDD)V 1.0
org.apache.commons.math3.linear.BlockRealMatrix:setEntry(IID)V 1.0
org.apache.commons.math3.analysis.polynomials.PolynomialFunction:<init>([D)V 1.0
org.apache.commons.math3.optim.nonlinear.vector.ModelFunctionJacobian:<init>(Lorg/apache/commons/math3/analysis/MultivariateMatrixFunction;)V 1.0
org.apache.commons.math3.optim.nonlinear.vector.ModelFunction:<init>(Lorg/apache/commons/math3/analysis/MultivariateVectorFunction;)V 1.0
org.apache.commons.math3.optim.nonlinear.vector.Target:<init>([D)V 1.0
org.apache.commons.math3.optim.nonlinear.vector.Weight:<init>([D)V 1.0
org.apache.commons.math3.optim.nonlinear.vector.Weight:getWeight()Lorg/apache/commons/math3/linear/RealMatrix; 1.0
org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer:optimize([Lorg/apache/commons/math3/optim/OptimizationData;)Lorg/apache/commons/math3/optim/PointVectorValuePair; 1.0
org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer:parseOptimizationData([Lorg/apache/commons/math3/optim/OptimizationData;)V 1.0
org.apache.commons.math3.optim.nonlinear.vector.JacobianMultivariateVectorOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V 1.0
org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V 1.0
org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V 1.0
org.apache.commons.math3.linear.BlockRealMatrix:<init>(II)V 1.0
org.apache.commons.math3.linear.BlockRealMatrix:createBlocksLayout(II)[[D 1.0
org.apache.commons.math3.optim.InitialGuess:<init>([D)V 1.0
org.apache.commons.math3.optim.MaxEval:<init>(I)V 1.0
org.apache.commons.math3.optim.BaseMultivariateOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V 1.0
org.apache.commons.math3.optim.BaseOptimizer$MaxEvalCallback:<init>(Lorg/apache/commons/math3/optim/BaseOptimizer$1;)V 1.0
org.apache.commons.math3.optim.BaseOptimizer$MaxIterCallback:<init>(Lorg/apache/commons/math3/optim/BaseOptimizer$1;)V 1.0
org.apache.commons.math3.optim.BaseOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V 1.0
org.apache.commons.math3.linear.BlockRealMatrix:getColumnDimension()I 1.0
org.apache.commons.math3.linear.BlockRealMatrix:getRowDimension()I 1.0
org.apache.commons.math3.linear.BlockRealMatrix:blockWidth(I)I 1.0
org.apache.commons.math3.linear.MatrixUtils:createRealMatrix(II)Lorg/apache/commons/math3/linear/RealMatrix; 1.0
org.apache.commons.math3.linear.MatrixUtils:checkMatrixIndex(Lorg/apache/commons/math3/linear/AnyMatrix;II)V 1.0
org.apache.commons.math3.linear.AbstractRealMatrix:<init>(II)V 1.0
org.apache.commons.math3.linear.MatrixUtils:checkRowIndex(Lorg/apache/commons/math3/linear/AnyMatrix;I)V 1.0
org.apache.commons.math3.linear.MatrixUtils:checkColumnIndex(Lorg/apache/commons/math3/linear/AnyMatrix;I)V 1.0
org.apache.commons.math3.util.FastMath:min(II)I 1.0
org.apache.commons.math3.linear.RealLinearOperator:<init>()V 1.0
org.apache.commons.math3.util.Incrementor:<init>(ILorg/apache/commons/math3/util/Incrementor$MaxCountExceededCallback;)V 1.0
org.apache.commons.math3.util.MathUtils:checkNotNull(Ljava/lang/Object;)V 1.0
org.apache.commons.math3.fitting.PolynomialFitter:fit([D)[D 1.0
org.apache.commons.math3.fitting.PolynomialFitter:<init>(Lorg/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer;)V 1.0
org.apache.commons.math3.analysis.polynomials.PolynomialFunction$Parametric:<init>()V 1.0
org.apache.commons.math3.fitting.CurveFitter:fit(Lorg/apache/commons/math3/analysis/ParametricUnivariateFunction;[D)[D 1.0
org.apache.commons.math3.fitting.CurveFitter$TheoreticalValuesFunction$1:<init>(Lorg/apache/commons/math3/fitting/CurveFitter$TheoreticalValuesFunction;)V 1.0
org.apache.commons.math3.fitting.CurveFitter$TheoreticalValuesFunction$2:<init>(Lorg/apache/commons/math3/fitting/CurveFitter$TheoreticalValuesFunction;)V 1.0
org.apache.commons.math3.fitting.CurveFitter$TheoreticalValuesFunction:<init>(Lorg/apache/commons/math3/fitting/CurveFitter;Lorg/apache/commons/math3/analysis/ParametricUnivariateFunction;)V 1.0
org.apache.commons.math3.fitting.CurveFitter$TheoreticalValuesFunction:getModelFunction()Lorg/apache/commons/math3/optim/nonlinear/vector/ModelFunction; 1.0
org.apache.commons.math3.fitting.CurveFitter$TheoreticalValuesFunction:getModelFunctionJacobian()Lorg/apache/commons/math3/optim/nonlinear/vector/ModelFunctionJacobian; 1.0
org.apache.commons.math3.fitting.CurveFitter:fit(ILorg/apache/commons/math3/analysis/ParametricUnivariateFunction;[D)[D 1.0
org.apache.commons.math3.fitting.WeightedObservedPoint:getWeight()D 1.0
org.apache.commons.math3.fitting.CurveFitter:addObservedPoint(DDD)V 1.0
org.apache.commons.math3.fitting.WeightedObservedPoint:getY()D 1.0
org.apache.commons.math3.fitting.WeightedObservedPoint:<init>(DDD)V 1.0
org.apache.commons.math3.fitting.CurveFitter:<init>(Lorg/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer;)V 1.0
org.apache.commons.math3.linear.BlockRealMatrix:copy()Lorg/apache/commons/math3/linear/BlockRealMatrix; 1.0
org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer:<init>()V 1.0
org.apache.commons.math3.analysis.polynomials.PolynomialFunction:value(D)D 1.0
org.apache.commons.math3.analysis.polynomials.PolynomialFunction:evaluate([DD)D 1.0
org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer:<init>(DDDDD)V 1.0
org.apache.commons.math3.linear.BlockRealMatrix:setEntry(IID)V 1.0
org.apache.commons.math3.analysis.polynomials.PolynomialFunction:<init>([D)V 1.0
org.apache.commons.math3.optim.nonlinear.vector.ModelFunctionJacobian:<init>(Lorg/apache/commons/math3/analysis/MultivariateMatrixFunction;)V 1.0
org.apache.commons.math3.optim.nonlinear.vector.ModelFunction:<init>(Lorg/apache/commons/math3/analysis/MultivariateVectorFunction;)V 1.0
org.apache.commons.math3.optim.nonlinear.vector.Target:<init>([D)V 1.0
org.apache.commons.math3.optim.nonlinear.vector.Weight:<init>([D)V 1.0
org.apache.commons.math3.optim.nonlinear.vector.Weight:getWeight()Lorg/apache/commons/math3/linear/RealMatrix; 1.0
org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer:optimize([Lorg/apache/commons/math3/optim/OptimizationData;)Lorg/apache/commons/math3/optim/PointVectorValuePair; 1.0
org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer:parseOptimizationData([Lorg/apache/commons/math3/optim/OptimizationData;)V 1.0
org.apache.commons.math3.optim.nonlinear.vector.JacobianMultivariateVectorOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V 1.0
org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V 1.0
org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V 1.0
org.apache.commons.math3.linear.BlockRealMatrix:<init>(II)V 1.0
org.apache.commons.math3.linear.BlockRealMatrix:createBlocksLayout(II)[[D 1.0
org.apache.commons.math3.optim.InitialGuess:<init>([D)V 1.0
org.apache.commons.math3.optim.MaxEval:<init>(I)V 1.0
org.apache.commons.math3.optim.BaseMultivariateOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V 1.0
org.apache.commons.math3.optim.BaseOptimizer$MaxEvalCallback:<init>(Lorg/apache/commons/math3/optim/BaseOptimizer$1;)V 1.0
org.apache.commons.math3.optim.BaseOptimizer$MaxIterCallback:<init>(Lorg/apache/commons/math3/optim/BaseOptimizer$1;)V 1.0
org.apache.commons.math3.optim.BaseOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V 1.0
org.apache.commons.math3.linear.BlockRealMatrix:getColumnDimension()I 1.0
org.apache.commons.math3.linear.BlockRealMatrix:getRowDimension()I 1.0
org.apache.commons.math3.linear.BlockRealMatrix:blockWidth(I)I 1.0
org.apache.commons.math3.linear.MatrixUtils:createRealMatrix(II)Lorg/apache/commons/math3/linear/RealMatrix; 1.0
org.apache.commons.math3.linear.MatrixUtils:checkMatrixIndex(Lorg/apache/commons/math3/linear/AnyMatrix;II)V 1.0
org.apache.commons.math3.linear.AbstractRealMatrix:<init>(II)V 1.0
org.apache.commons.math3.linear.MatrixUtils:checkRowIndex(Lorg/apache/commons/math3/linear/AnyMatrix;I)V 1.0
org.apache.commons.math3.linear.MatrixUtils:checkColumnIndex(Lorg/apache/commons/math3/linear/AnyMatrix;I)V 1.0
org.apache.commons.math3.util.FastMath:min(II)I 1.0
org.apache.commons.math3.linear.RealLinearOperator:<init>()V 1.0
org.apache.commons.math3.util.Incrementor:<init>(ILorg/apache/commons/math3/util/Incrementor$MaxCountExceededCallback;)V 1.0
org.apache.commons.math3.util.MathUtils:checkNotNull(Ljava/lang/Object;)V 1.0
org.apache.commons.math3.fitting.PolynomialFitter:fit([D)[D 1.0
org.apache.commons.math3.fitting.CurveFitter:fit(Lorg/apache/commons/math3/analysis/ParametricUnivariateFunction;[D)[D 1.0
org.apache.commons.math3.fitting.CurveFitter:fit(ILorg/apache/commons/math3/analysis/ParametricUnivariateFunction;[D)[D 1.0
org.apache.commons.math3.fitting.PolynomialFitter:<init>(Lorg/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer;)V 1.0
org.apache.commons.math3.analysis.polynomials.PolynomialFunction$Parametric:<init>()V 1.0
org.apache.commons.math3.fitting.CurveFitter$TheoreticalValuesFunction$1:<init>(Lorg/apache/commons/math3/fitting/CurveFitter$TheoreticalValuesFunction;)V 1.0
org.apache.commons.math3.fitting.CurveFitter$TheoreticalValuesFunction$2:<init>(Lorg/apache/commons/math3/fitting/CurveFitter$TheoreticalValuesFunction;)V 1.0
org.apache.commons.math3.fitting.CurveFitter$TheoreticalValuesFunction:<init>(Lorg/apache/commons/math3/fitting/CurveFitter;Lorg/apache/commons/math3/analysis/ParametricUnivariateFunction;)V 1.0
org.apache.commons.math3.fitting.CurveFitter$TheoreticalValuesFunction:getModelFunction()Lorg/apache/commons/math3/optim/nonlinear/vector/ModelFunction; 1.0
org.apache.commons.math3.fitting.CurveFitter$TheoreticalValuesFunction:getModelFunctionJacobian()Lorg/apache/commons/math3/optim/nonlinear/vector/ModelFunctionJacobian; 1.0
org.apache.commons.math3.fitting.WeightedObservedPoint:getWeight()D 1.0
org.apache.commons.math3.fitting.CurveFitter:addObservedPoint(DDD)V 1.0
org.apache.commons.math3.fitting.WeightedObservedPoint:getY()D 1.0
org.apache.commons.math3.fitting.WeightedObservedPoint:<init>(DDD)V 1.0
org.apache.commons.math3.fitting.CurveFitter:<init>(Lorg/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer;)V 1.0
org.apache.commons.math3.linear.BlockRealMatrix:copy()Lorg/apache/commons/math3/linear/BlockRealMatrix; 1.0
org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer:<init>()V 1.0
org.apache.commons.math3.analysis.polynomials.PolynomialFunction:value(D)D 1.0
org.apache.commons.math3.analysis.polynomials.PolynomialFunction:evaluate([DD)D 1.0
org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer:<init>(DDDDD)V 1.0
org.apache.commons.math3.linear.BlockRealMatrix:setEntry(IID)V 1.0
org.apache.commons.math3.analysis.polynomials.PolynomialFunction:<init>([D)V 1.0
org.apache.commons.math3.optim.nonlinear.vector.ModelFunctionJacobian:<init>(Lorg/apache/commons/math3/analysis/MultivariateMatrixFunction;)V 1.0
org.apache.commons.math3.optim.nonlinear.vector.ModelFunction:<init>(Lorg/apache/commons/math3/analysis/MultivariateVectorFunction;)V 1.0
org.apache.commons.math3.optim.nonlinear.vector.Target:<init>([D)V 1.0
org.apache.commons.math3.optim.nonlinear.vector.Weight:<init>([D)V 1.0
org.apache.commons.math3.optim.nonlinear.vector.Weight:getWeight()Lorg/apache/commons/math3/linear/RealMatrix; 1.0
org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer:optimize([Lorg/apache/commons/math3/optim/OptimizationData;)Lorg/apache/commons/math3/optim/PointVectorValuePair; 1.0
org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer:parseOptimizationData([Lorg/apache/commons/math3/optim/OptimizationData;)V 1.0
org.apache.commons.math3.optim.nonlinear.vector.JacobianMultivariateVectorOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V 1.0
org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V 1.0
org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V 1.0
org.apache.commons.math3.linear.BlockRealMatrix:<init>(II)V 1.0
org.apache.commons.math3.linear.BlockRealMatrix:createBlocksLayout(II)[[D 1.0
org.apache.commons.math3.optim.InitialGuess:<init>([D)V 1.0
org.apache.commons.math3.optim.MaxEval:<init>(I)V 1.0
org.apache.commons.math3.optim.BaseMultivariateOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V 1.0
org.apache.commons.math3.optim.BaseOptimizer$MaxEvalCallback:<init>(Lorg/apache/commons/math3/optim/BaseOptimizer$1;)V 1.0
org.apache.commons.math3.optim.BaseOptimizer$MaxIterCallback:<init>(Lorg/apache/commons/math3/optim/BaseOptimizer$1;)V 1.0
org.apache.commons.math3.optim.BaseOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V 1.0
org.apache.commons.math3.linear.BlockRealMatrix:getColumnDimension()I 1.0
org.apache.commons.math3.linear.BlockRealMatrix:getRowDimension()I 1.0
org.apache.commons.math3.linear.BlockRealMatrix:blockWidth(I)I 1.0
org.apache.commons.math3.linear.MatrixUtils:createRealMatrix(II)Lorg/apache/commons/math3/linear/RealMatrix; 1.0
org.apache.commons.math3.linear.MatrixUtils:checkMatrixIndex(Lorg/apache/commons/math3/linear/AnyMatrix;II)V 1.0
org.apache.commons.math3.linear.AbstractRealMatrix:<init>(II)V 1.0
org.apache.commons.math3.linear.MatrixUtils:checkRowIndex(Lorg/apache/commons/math3/linear/AnyMatrix;I)V 1.0
org.apache.commons.math3.linear.MatrixUtils:checkColumnIndex(Lorg/apache/commons/math3/linear/AnyMatrix;I)V 1.0
org.apache.commons.math3.util.FastMath:min(II)I 1.0
org.apache.commons.math3.linear.RealLinearOperator:<init>()V 1.0
org.apache.commons.math3.util.Incrementor:<init>(ILorg/apache/commons/math3/util/Incrementor$MaxCountExceededCallback;)V 1.0
org.apache.commons.math3.util.MathUtils:checkNotNull(Ljava/lang/Object;)V 1.0
org.apache.commons.math3.fitting.PolynomialFitter:fit([D)[D 1.0
org.apache.commons.math3.fitting.CurveFitter:fit(Lorg/apache/commons/math3/analysis/ParametricUnivariateFunction;[D)[D 1.0
org.apache.commons.math3.fitting.PolynomialFitter:<init>(Lorg/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer;)V 1.0
org.apache.commons.math3.analysis.polynomials.PolynomialFunction$Parametric:<init>()V 1.0
org.apache.commons.math3.fitting.CurveFitter$TheoreticalValuesFunction$1:<init>(Lorg/apache/commons/math3/fitting/CurveFitter$TheoreticalValuesFunction;)V 1.0
org.apache.commons.math3.fitting.CurveFitter$TheoreticalValuesFunction$2:<init>(Lorg/apache/commons/math3/fitting/CurveFitter$TheoreticalValuesFunction;)V 1.0
org.apache.commons.math3.fitting.CurveFitter$TheoreticalValuesFunction:<init>(Lorg/apache/commons/math3/fitting/CurveFitter;Lorg/apache/commons/math3/analysis/ParametricUnivariateFunction;)V 1.0
org.apache.commons.math3.fitting.CurveFitter$TheoreticalValuesFunction:getModelFunction()Lorg/apache/commons/math3/optim/nonlinear/vector/ModelFunction; 1.0
org.apache.commons.math3.fitting.CurveFitter$TheoreticalValuesFunction:getModelFunctionJacobian()Lorg/apache/commons/math3/optim/nonlinear/vector/ModelFunctionJacobian; 1.0
org.apache.commons.math3.fitting.CurveFitter:fit(ILorg/apache/commons/math3/analysis/ParametricUnivariateFunction;[D)[D 1.0
org.apache.commons.math3.fitting.WeightedObservedPoint:getWeight()D 1.0
org.apache.commons.math3.fitting.CurveFitter:addObservedPoint(DDD)V 1.0
org.apache.commons.math3.fitting.WeightedObservedPoint:getY()D 1.0
org.apache.commons.math3.fitting.WeightedObservedPoint:<init>(DDD)V 1.0
org.apache.commons.math3.fitting.CurveFitter:<init>(Lorg/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer;)V 1.0
org.apache.commons.math3.linear.BlockRealMatrix:copy()Lorg/apache/commons/math3/linear/BlockRealMatrix; 1.0
org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer:<init>()V 1.0
org.apache.commons.math3.analysis.polynomials.PolynomialFunction:value(D)D 1.0
org.apache.commons.math3.analysis.polynomials.PolynomialFunction:evaluate([DD)D 1.0
org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer:<init>(DDDDD)V 1.0
org.apache.commons.math3.linear.BlockRealMatrix:setEntry(IID)V 1.0
org.apache.commons.math3.analysis.polynomials.PolynomialFunction:<init>([D)V 1.0
org.apache.commons.math3.optim.nonlinear.vector.ModelFunctionJacobian:<init>(Lorg/apache/commons/math3/analysis/MultivariateMatrixFunction;)V 1.0
org.apache.commons.math3.optim.nonlinear.vector.ModelFunction:<init>(Lorg/apache/commons/math3/analysis/MultivariateVectorFunction;)V 1.0
org.apache.commons.math3.optim.nonlinear.vector.Target:<init>([D)V 1.0
org.apache.commons.math3.optim.nonlinear.vector.Weight:<init>([D)V 1.0
org.apache.commons.math3.optim.nonlinear.vector.Weight:getWeight()Lorg/apache/commons/math3/linear/RealMatrix; 1.0
org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer:optimize([Lorg/apache/commons/math3/optim/OptimizationData;)Lorg/apache/commons/math3/optim/PointVectorValuePair; 1.0
org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer:parseOptimizationData([Lorg/apache/commons/math3/optim/OptimizationData;)V 1.0
org.apache.commons.math3.optim.nonlinear.vector.JacobianMultivariateVectorOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V 1.0
org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V 1.0
org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V 1.0
org.apache.commons.math3.linear.BlockRealMatrix:<init>(II)V 1.0
org.apache.commons.math3.linear.BlockRealMatrix:createBlocksLayout(II)[[D 1.0
org.apache.commons.math3.optim.InitialGuess:<init>([D)V 1.0
org.apache.commons.math3.optim.MaxEval:<init>(I)V 1.0
org.apache.commons.math3.optim.BaseMultivariateOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V 1.0
org.apache.commons.math3.optim.BaseOptimizer$MaxEvalCallback:<init>(Lorg/apache/commons/math3/optim/BaseOptimizer$1;)V 1.0
org.apache.commons.math3.optim.BaseOptimizer$MaxIterCallback:<init>(Lorg/apache/commons/math3/optim/BaseOptimizer$1;)V 1.0
org.apache.commons.math3.optim.BaseOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V 1.0
org.apache.commons.math3.linear.BlockRealMatrix:getColumnDimension()I 1.0
org.apache.commons.math3.linear.BlockRealMatrix:getRowDimension()I 1.0
org.apache.commons.math3.linear.BlockRealMatrix:blockWidth(I)I 1.0
org.apache.commons.math3.linear.MatrixUtils:createRealMatrix(II)Lorg/apache/commons/math3/linear/RealMatrix; 1.0
org.apache.commons.math3.linear.MatrixUtils:checkMatrixIndex(Lorg/apache/commons/math3/linear/AnyMatrix;II)V 1.0
org.apache.commons.math3.linear.AbstractRealMatrix:<init>(II)V 1.0
org.apache.commons.math3.linear.MatrixUtils:checkRowIndex(Lorg/apache/commons/math3/linear/AnyMatrix;I)V 1.0
org.apache.commons.math3.linear.MatrixUtils:checkColumnIndex(Lorg/apache/commons/math3/linear/AnyMatrix;I)V 1.0
org.apache.commons.math3.util.FastMath:min(II)I 1.0
org.apache.commons.math3.linear.RealLinearOperator:<init>()V 1.0
org.apache.commons.math3.util.Incrementor:<init>(ILorg/apache/commons/math3/util/Incrementor$MaxCountExceededCallback;)V 1.0
org.apache.commons.math3.util.MathUtils:checkNotNull(Ljava/lang/Object;)V 1.0
org.apache.commons.math3.fitting.PolynomialFitter:fit([D)[D 1.0
org.apache.commons.math3.fitting.CurveFitter:fit(Lorg/apache/commons/math3/analysis/ParametricUnivariateFunction;[D)[D 1.0
org.apache.commons.math3.fitting.CurveFitter:fit(ILorg/apache/commons/math3/analysis/ParametricUnivariateFunction;[D)[D 1.0
org.apache.commons.math3.fitting.PolynomialFitter:<init>(Lorg/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer;)V 1.0
org.apache.commons.math3.analysis.polynomials.PolynomialFunction$Parametric:<init>()V 1.0
org.apache.commons.math3.fitting.CurveFitter$TheoreticalValuesFunction$1:<init>(Lorg/apache/commons/math3/fitting/CurveFitter$TheoreticalValuesFunction;)V 1.0
org.apache.commons.math3.fitting.CurveFitter$TheoreticalValuesFunction$2:<init>(Lorg/apache/commons/math3/fitting/CurveFitter$TheoreticalValuesFunction;)V 1.0
org.apache.commons.math3.fitting.CurveFitter$TheoreticalValuesFunction:<init>(Lorg/apache/commons/math3/fitting/CurveFitter;Lorg/apache/commons/math3/analysis/ParametricUnivariateFunction;)V 1.0
org.apache.commons.math3.fitting.CurveFitter$TheoreticalValuesFunction:getModelFunction()Lorg/apache/commons/math3/optim/nonlinear/vector/ModelFunction; 1.0
org.apache.commons.math3.fitting.CurveFitter$TheoreticalValuesFunction:getModelFunctionJacobian()Lorg/apache/commons/math3/optim/nonlinear/vector/ModelFunctionJacobian; 1.0
org.apache.commons.math3.fitting.WeightedObservedPoint:getWeight()D 1.0
org.apache.commons.math3.fitting.CurveFitter:addObservedPoint(DDD)V 1.0
org.apache.commons.math3.fitting.WeightedObservedPoint:getY()D 1.0
org.apache.commons.math3.fitting.WeightedObservedPoint:<init>(DDD)V 1.0
org.apache.commons.math3.fitting.CurveFitter:<init>(Lorg/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer;)V 1.0
org.apache.commons.math3.linear.BlockRealMatrix:copy()Lorg/apache/commons/math3/linear/BlockRealMatrix; 1.0
org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer:<init>()V 1.0
org.apache.commons.math3.analysis.polynomials.PolynomialFunction:value(D)D 1.0
org.apache.commons.math3.analysis.polynomials.PolynomialFunction:evaluate([DD)D 1.0
org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer:<init>(DDDDD)V 1.0
org.apache.commons.math3.linear.BlockRealMatrix:setEntry(IID)V 1.0
org.apache.commons.math3.analysis.polynomials.PolynomialFunction:<init>([D)V 1.0
org.apache.commons.math3.optim.nonlinear.vector.ModelFunctionJacobian:<init>(Lorg/apache/commons/math3/analysis/MultivariateMatrixFunction;)V 1.0
org.apache.commons.math3.optim.nonlinear.vector.ModelFunction:<init>(Lorg/apache/commons/math3/analysis/MultivariateVectorFunction;)V 1.0
org.apache.commons.math3.optim.nonlinear.vector.Target:<init>([D)V 1.0
org.apache.commons.math3.optim.nonlinear.vector.Weight:<init>([D)V 1.0
org.apache.commons.math3.optim.nonlinear.vector.Weight:getWeight()Lorg/apache/commons/math3/linear/RealMatrix; 1.0
org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer:optimize([Lorg/apache/commons/math3/optim/OptimizationData;)Lorg/apache/commons/math3/optim/PointVectorValuePair; 1.0
org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer:parseOptimizationData([Lorg/apache/commons/math3/optim/OptimizationData;)V 1.0
org.apache.commons.math3.optim.nonlinear.vector.JacobianMultivariateVectorOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V 1.0
org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V 1.0
org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V 1.0
org.apache.commons.math3.linear.BlockRealMatrix:<init>(II)V 1.0
org.apache.commons.math3.linear.BlockRealMatrix:createBlocksLayout(II)[[D 1.0
org.apache.commons.math3.optim.InitialGuess:<init>([D)V 1.0
org.apache.commons.math3.optim.MaxEval:<init>(I)V 1.0
org.apache.commons.math3.optim.BaseMultivariateOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V 1.0
org.apache.commons.math3.optim.BaseOptimizer$MaxEvalCallback:<init>(Lorg/apache/commons/math3/optim/BaseOptimizer$1;)V 1.0
org.apache.commons.math3.optim.BaseOptimizer$MaxIterCallback:<init>(Lorg/apache/commons/math3/optim/BaseOptimizer$1;)V 1.0
org.apache.commons.math3.optim.BaseOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V 1.0
org.apache.commons.math3.linear.BlockRealMatrix:getColumnDimension()I 1.0
org.apache.commons.math3.linear.BlockRealMatrix:getRowDimension()I 1.0
org.apache.commons.math3.linear.BlockRealMatrix:blockWidth(I)I 1.0
org.apache.commons.math3.linear.MatrixUtils:createRealMatrix(II)Lorg/apache/commons/math3/linear/RealMatrix; 1.0
org.apache.commons.math3.linear.MatrixUtils:checkMatrixIndex(Lorg/apache/commons/math3/linear/AnyMatrix;II)V 1.0
org.apache.commons.math3.linear.AbstractRealMatrix:<init>(II)V 1.0
org.apache.commons.math3.linear.MatrixUtils:checkRowIndex(Lorg/apache/commons/math3/linear/AnyMatrix;I)V 1.0
org.apache.commons.math3.linear.MatrixUtils:checkColumnIndex(Lorg/apache/commons/math3/linear/AnyMatrix;I)V 1.0
org.apache.commons.math3.util.FastMath:min(II)I 1.0
org.apache.commons.math3.linear.RealLinearOperator:<init>()V 1.0
org.apache.commons.math3.util.Incrementor:<init>(ILorg/apache/commons/math3/util/Incrementor$MaxCountExceededCallback;)V 1.0
org.apache.commons.math3.util.MathUtils:checkNotNull(Ljava/lang/Object;)V 1.0
org.apache.commons.math3.fitting.PolynomialFitter:<init>(Lorg/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer;)V 1.0
org.apache.commons.math3.fitting.PolynomialFitter:fit([D)[D 1.0
org.apache.commons.math3.analysis.polynomials.PolynomialFunction$Parametric:<init>()V 1.0
org.apache.commons.math3.fitting.CurveFitter:fit(Lorg/apache/commons/math3/analysis/ParametricUnivariateFunction;[D)[D 1.0
org.apache.commons.math3.fitting.CurveFitter$TheoreticalValuesFunction$1:<init>(Lorg/apache/commons/math3/fitting/CurveFitter$TheoreticalValuesFunction;)V 1.0
org.apache.commons.math3.fitting.CurveFitter$TheoreticalValuesFunction$2:<init>(Lorg/apache/commons/math3/fitting/CurveFitter$TheoreticalValuesFunction;)V 1.0
org.apache.commons.math3.fitting.CurveFitter$TheoreticalValuesFunction:<init>(Lorg/apache/commons/math3/fitting/CurveFitter;Lorg/apache/commons/math3/analysis/ParametricUnivariateFunction;)V 1.0
org.apache.commons.math3.fitting.CurveFitter$TheoreticalValuesFunction:getModelFunction()Lorg/apache/commons/math3/optim/nonlinear/vector/ModelFunction; 1.0
org.apache.commons.math3.fitting.CurveFitter$TheoreticalValuesFunction:getModelFunctionJacobian()Lorg/apache/commons/math3/optim/nonlinear/vector/ModelFunctionJacobian; 1.0
org.apache.commons.math3.fitting.CurveFitter:fit(ILorg/apache/commons/math3/analysis/ParametricUnivariateFunction;[D)[D 1.0
org.apache.commons.math3.fitting.WeightedObservedPoint:getWeight()D 1.0
org.apache.commons.math3.fitting.CurveFitter:addObservedPoint(DDD)V 1.0
org.apache.commons.math3.fitting.WeightedObservedPoint:getY()D 1.0
org.apache.commons.math3.fitting.WeightedObservedPoint:<init>(DDD)V 1.0
org.apache.commons.math3.fitting.CurveFitter:<init>(Lorg/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer;)V 1.0
org.apache.commons.math3.linear.BlockRealMatrix:copy()Lorg/apache/commons/math3/linear/BlockRealMatrix; 1.0
org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer:<init>()V 1.0
org.apache.commons.math3.analysis.polynomials.PolynomialFunction:value(D)D 1.0
org.apache.commons.math3.analysis.polynomials.PolynomialFunction:evaluate([DD)D 1.0
org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer:<init>(DDDDD)V 1.0
org.apache.commons.math3.linear.BlockRealMatrix:setEntry(IID)V 1.0
org.apache.commons.math3.analysis.polynomials.PolynomialFunction:<init>([D)V 1.0
org.apache.commons.math3.optim.nonlinear.vector.ModelFunctionJacobian:<init>(Lorg/apache/commons/math3/analysis/MultivariateMatrixFunction;)V 1.0
org.apache.commons.math3.optim.nonlinear.vector.ModelFunction:<init>(Lorg/apache/commons/math3/analysis/MultivariateVectorFunction;)V 1.0
org.apache.commons.math3.optim.nonlinear.vector.Target:<init>([D)V 1.0
org.apache.commons.math3.optim.nonlinear.vector.Weight:<init>([D)V 1.0
org.apache.commons.math3.optim.nonlinear.vector.Weight:getWeight()Lorg/apache/commons/math3/linear/RealMatrix; 1.0
org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer:optimize([Lorg/apache/commons/math3/optim/OptimizationData;)Lorg/apache/commons/math3/optim/PointVectorValuePair; 1.0
org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer:parseOptimizationData([Lorg/apache/commons/math3/optim/OptimizationData;)V 1.0
org.apache.commons.math3.optim.nonlinear.vector.JacobianMultivariateVectorOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V 1.0
org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V 1.0
org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V 1.0
org.apache.commons.math3.linear.BlockRealMatrix:<init>(II)V 1.0
org.apache.commons.math3.linear.BlockRealMatrix:createBlocksLayout(II)[[D 1.0
org.apache.commons.math3.optim.InitialGuess:<init>([D)V 1.0
org.apache.commons.math3.optim.MaxEval:<init>(I)V 1.0
org.apache.commons.math3.optim.BaseMultivariateOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V 1.0
org.apache.commons.math3.optim.BaseOptimizer$MaxEvalCallback:<init>(Lorg/apache/commons/math3/optim/BaseOptimizer$1;)V 1.0
org.apache.commons.math3.optim.BaseOptimizer$MaxIterCallback:<init>(Lorg/apache/commons/math3/optim/BaseOptimizer$1;)V 1.0
org.apache.commons.math3.optim.BaseOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V 1.0
org.apache.commons.math3.linear.BlockRealMatrix:getColumnDimension()I 1.0
org.apache.commons.math3.linear.BlockRealMatrix:getRowDimension()I 1.0
org.apache.commons.math3.linear.BlockRealMatrix:blockWidth(I)I 1.0
org.apache.commons.math3.linear.MatrixUtils:createRealMatrix(II)Lorg/apache/commons/math3/linear/RealMatrix; 1.0
org.apache.commons.math3.linear.MatrixUtils:checkMatrixIndex(Lorg/apache/commons/math3/linear/AnyMatrix;II)V 1.0
org.apache.commons.math3.linear.AbstractRealMatrix:<init>(II)V 1.0
org.apache.commons.math3.linear.MatrixUtils:checkRowIndex(Lorg/apache/commons/math3/linear/AnyMatrix;I)V 1.0
org.apache.commons.math3.linear.MatrixUtils:checkColumnIndex(Lorg/apache/commons/math3/linear/AnyMatrix;I)V 1.0
org.apache.commons.math3.util.FastMath:min(II)I 1.0
org.apache.commons.math3.linear.RealLinearOperator:<init>()V 1.0
org.apache.commons.math3.util.Incrementor:<init>(ILorg/apache/commons/math3/util/Incrementor$MaxCountExceededCallback;)V 1.0
org.apache.commons.math3.util.MathUtils:checkNotNull(Ljava/lang/Object;)V 1.0
org.apache.commons.math3.fitting.PolynomialFitter:<init>(Lorg/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer;)V 1.0
org.apache.commons.math3.fitting.PolynomialFitter:fit([D)[D 1.0
org.apache.commons.math3.analysis.polynomials.PolynomialFunction$Parametric:<init>()V 1.0
org.apache.commons.math3.fitting.CurveFitter:fit(Lorg/apache/commons/math3/analysis/ParametricUnivariateFunction;[D)[D 1.0
org.apache.commons.math3.fitting.CurveFitter$TheoreticalValuesFunction$1:<init>(Lorg/apache/commons/math3/fitting/CurveFitter$TheoreticalValuesFunction;)V 1.0
org.apache.commons.math3.fitting.CurveFitter$TheoreticalValuesFunction$2:<init>(Lorg/apache/commons/math3/fitting/CurveFitter$TheoreticalValuesFunction;)V 1.0
org.apache.commons.math3.fitting.CurveFitter$TheoreticalValuesFunction:<init>(Lorg/apache/commons/math3/fitting/CurveFitter;Lorg/apache/commons/math3/analysis/ParametricUnivariateFunction;)V 1.0
org.apache.commons.math3.fitting.CurveFitter$TheoreticalValuesFunction:getModelFunction()Lorg/apache/commons/math3/optim/nonlinear/vector/ModelFunction; 1.0
org.apache.commons.math3.fitting.CurveFitter$TheoreticalValuesFunction:getModelFunctionJacobian()Lorg/apache/commons/math3/optim/nonlinear/vector/ModelFunctionJacobian; 1.0
org.apache.commons.math3.fitting.CurveFitter:fit(ILorg/apache/commons/math3/analysis/ParametricUnivariateFunction;[D)[D 1.0
org.apache.commons.math3.fitting.WeightedObservedPoint:getWeight()D 1.0
org.apache.commons.math3.fitting.CurveFitter:addObservedPoint(DDD)V 1.0
org.apache.commons.math3.fitting.WeightedObservedPoint:getY()D 1.0
org.apache.commons.math3.fitting.WeightedObservedPoint:<init>(DDD)V 1.0
org.apache.commons.math3.fitting.CurveFitter:<init>(Lorg/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer;)V 1.0
org.apache.commons.math3.linear.BlockRealMatrix:copy()Lorg/apache/commons/math3/linear/BlockRealMatrix; 1.0
org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer:<init>()V 1.0
org.apache.commons.math3.analysis.polynomials.PolynomialFunction:value(D)D 1.0
org.apache.commons.math3.analysis.polynomials.PolynomialFunction:evaluate([DD)D 1.0
org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer:<init>(DDDDD)V 1.0
org.apache.commons.math3.linear.BlockRealMatrix:setEntry(IID)V 1.0
org.apache.commons.math3.analysis.polynomials.PolynomialFunction:<init>([D)V 1.0
org.apache.commons.math3.optim.nonlinear.vector.ModelFunctionJacobian:<init>(Lorg/apache/commons/math3/analysis/MultivariateMatrixFunction;)V 1.0
org.apache.commons.math3.optim.nonlinear.vector.ModelFunction:<init>(Lorg/apache/commons/math3/analysis/MultivariateVectorFunction;)V 1.0
org.apache.commons.math3.optim.nonlinear.vector.Target:<init>([D)V 1.0
org.apache.commons.math3.optim.nonlinear.vector.Weight:<init>([D)V 1.0
org.apache.commons.math3.optim.nonlinear.vector.Weight:getWeight()Lorg/apache/commons/math3/linear/RealMatrix; 1.0
org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer:optimize([Lorg/apache/commons/math3/optim/OptimizationData;)Lorg/apache/commons/math3/optim/PointVectorValuePair; 1.0
org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer:parseOptimizationData([Lorg/apache/commons/math3/optim/OptimizationData;)V 1.0
org.apache.commons.math3.optim.nonlinear.vector.JacobianMultivariateVectorOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V 1.0
org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V 1.0
org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V 1.0
org.apache.commons.math3.linear.BlockRealMatrix:<init>(II)V 1.0
org.apache.commons.math3.linear.BlockRealMatrix:createBlocksLayout(II)[[D 1.0
org.apache.commons.math3.optim.InitialGuess:<init>([D)V 1.0
org.apache.commons.math3.optim.MaxEval:<init>(I)V 1.0
org.apache.commons.math3.optim.BaseMultivariateOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V 1.0
org.apache.commons.math3.optim.BaseOptimizer$MaxEvalCallback:<init>(Lorg/apache/commons/math3/optim/BaseOptimizer$1;)V 1.0
org.apache.commons.math3.optim.BaseOptimizer$MaxIterCallback:<init>(Lorg/apache/commons/math3/optim/BaseOptimizer$1;)V 1.0
org.apache.commons.math3.optim.BaseOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V 1.0
org.apache.commons.math3.linear.BlockRealMatrix:getColumnDimension()I 1.0
org.apache.commons.math3.linear.BlockRealMatrix:getRowDimension()I 1.0
org.apache.commons.math3.linear.BlockRealMatrix:blockWidth(I)I 1.0
org.apache.commons.math3.linear.MatrixUtils:createRealMatrix(II)Lorg/apache/commons/math3/linear/RealMatrix; 1.0
org.apache.commons.math3.linear.MatrixUtils:checkMatrixIndex(Lorg/apache/commons/math3/linear/AnyMatrix;II)V 1.0
org.apache.commons.math3.linear.AbstractRealMatrix:<init>(II)V 1.0
org.apache.commons.math3.linear.MatrixUtils:checkRowIndex(Lorg/apache/commons/math3/linear/AnyMatrix;I)V 1.0
org.apache.commons.math3.linear.MatrixUtils:checkColumnIndex(Lorg/apache/commons/math3/linear/AnyMatrix;I)V 1.0
org.apache.commons.math3.util.FastMath:min(II)I 1.0
org.apache.commons.math3.linear.RealLinearOperator:<init>()V 1.0
org.apache.commons.math3.util.Incrementor:<init>(ILorg/apache/commons/math3/util/Incrementor$MaxCountExceededCallback;)V 1.0
org.apache.commons.math3.util.MathUtils:checkNotNull(Ljava/lang/Object;)V 1.0
org.apache.commons.math3.fitting.PolynomialFitter:<init>(Lorg/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer;)V 1.0
org.apache.commons.math3.fitting.PolynomialFitter:fit([D)[D 1.0
org.apache.commons.math3.analysis.polynomials.PolynomialFunction$Parametric:<init>()V 1.0
org.apache.commons.math3.fitting.CurveFitter:fit(Lorg/apache/commons/math3/analysis/ParametricUnivariateFunction;[D)[D 1.0
org.apache.commons.math3.fitting.CurveFitter:fit(ILorg/apache/commons/math3/analysis/ParametricUnivariateFunction;[D)[D 1.0
org.apache.commons.math3.fitting.CurveFitter$TheoreticalValuesFunction$1:<init>(Lorg/apache/commons/math3/fitting/CurveFitter$TheoreticalValuesFunction;)V 1.0
org.apache.commons.math3.fitting.CurveFitter$TheoreticalValuesFunction$2:<init>(Lorg/apache/commons/math3/fitting/CurveFitter$TheoreticalValuesFunction;)V 1.0
org.apache.commons.math3.fitting.CurveFitter$TheoreticalValuesFunction:<init>(Lorg/apache/commons/math3/fitting/CurveFitter;Lorg/apache/commons/math3/analysis/ParametricUnivariateFunction;)V 1.0
org.apache.commons.math3.fitting.CurveFitter$TheoreticalValuesFunction:getModelFunction()Lorg/apache/commons/math3/optim/nonlinear/vector/ModelFunction; 1.0
org.apache.commons.math3.fitting.CurveFitter$TheoreticalValuesFunction:getModelFunctionJacobian()Lorg/apache/commons/math3/optim/nonlinear/vector/ModelFunctionJacobian; 1.0
org.apache.commons.math3.fitting.WeightedObservedPoint:getWeight()D 1.0
org.apache.commons.math3.fitting.CurveFitter:addObservedPoint(DDD)V 1.0
org.apache.commons.math3.fitting.WeightedObservedPoint:getY()D 1.0
org.apache.commons.math3.fitting.WeightedObservedPoint:<init>(DDD)V 1.0
org.apache.commons.math3.fitting.CurveFitter:<init>(Lorg/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer;)V 1.0
org.apache.commons.math3.linear.BlockRealMatrix:copy()Lorg/apache/commons/math3/linear/BlockRealMatrix; 1.0
org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer:<init>()V 1.0
org.apache.commons.math3.analysis.polynomials.PolynomialFunction:value(D)D 1.0
org.apache.commons.math3.analysis.polynomials.PolynomialFunction:evaluate([DD)D 1.0
org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer:<init>(DDDDD)V 1.0
org.apache.commons.math3.linear.BlockRealMatrix:setEntry(IID)V 1.0
org.apache.commons.math3.analysis.polynomials.PolynomialFunction:<init>([D)V 1.0
org.apache.commons.math3.optim.nonlinear.vector.ModelFunctionJacobian:<init>(Lorg/apache/commons/math3/analysis/MultivariateMatrixFunction;)V 1.0
org.apache.commons.math3.optim.nonlinear.vector.ModelFunction:<init>(Lorg/apache/commons/math3/analysis/MultivariateVectorFunction;)V 1.0
org.apache.commons.math3.optim.nonlinear.vector.Target:<init>([D)V 1.0
org.apache.commons.math3.optim.nonlinear.vector.Weight:<init>([D)V 1.0
org.apache.commons.math3.optim.nonlinear.vector.Weight:getWeight()Lorg/apache/commons/math3/linear/RealMatrix; 1.0
org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer:optimize([Lorg/apache/commons/math3/optim/OptimizationData;)Lorg/apache/commons/math3/optim/PointVectorValuePair; 1.0
org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer:parseOptimizationData([Lorg/apache/commons/math3/optim/OptimizationData;)V 1.0
org.apache.commons.math3.optim.nonlinear.vector.JacobianMultivariateVectorOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V 1.0
org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V 1.0
org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V 1.0
org.apache.commons.math3.linear.BlockRealMatrix:<init>(II)V 1.0
org.apache.commons.math3.linear.BlockRealMatrix:createBlocksLayout(II)[[D 1.0
org.apache.commons.math3.optim.InitialGuess:<init>([D)V 1.0
org.apache.commons.math3.optim.MaxEval:<init>(I)V 1.0
org.apache.commons.math3.optim.BaseMultivariateOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V 1.0
org.apache.commons.math3.optim.BaseOptimizer$MaxEvalCallback:<init>(Lorg/apache/commons/math3/optim/BaseOptimizer$1;)V 1.0
org.apache.commons.math3.optim.BaseOptimizer$MaxIterCallback:<init>(Lorg/apache/commons/math3/optim/BaseOptimizer$1;)V 1.0
org.apache.commons.math3.optim.BaseOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V 1.0
org.apache.commons.math3.linear.BlockRealMatrix:getColumnDimension()I 1.0
org.apache.commons.math3.linear.BlockRealMatrix:getRowDimension()I 1.0
org.apache.commons.math3.linear.BlockRealMatrix:blockWidth(I)I 1.0
org.apache.commons.math3.linear.MatrixUtils:createRealMatrix(II)Lorg/apache/commons/math3/linear/RealMatrix; 1.0
org.apache.commons.math3.linear.MatrixUtils:checkMatrixIndex(Lorg/apache/commons/math3/linear/AnyMatrix;II)V 1.0
org.apache.commons.math3.linear.AbstractRealMatrix:<init>(II)V 1.0
org.apache.commons.math3.linear.MatrixUtils:checkRowIndex(Lorg/apache/commons/math3/linear/AnyMatrix;I)V 1.0
org.apache.commons.math3.linear.MatrixUtils:checkColumnIndex(Lorg/apache/commons/math3/linear/AnyMatrix;I)V 1.0
org.apache.commons.math3.util.FastMath:min(II)I 1.0
org.apache.commons.math3.linear.RealLinearOperator:<init>()V 1.0
org.apache.commons.math3.util.Incrementor:<init>(ILorg/apache/commons/math3/util/Incrementor$MaxCountExceededCallback;)V 1.0
org.apache.commons.math3.util.MathUtils:checkNotNull(Ljava/lang/Object;)V 1.0
org.apache.commons.math3.fitting.CurveFitter:addObservedPoint(DDD)V 1.0
org.apache.commons.math3.fitting.PolynomialFitter:<init>(Lorg/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer;)V 1.0
org.apache.commons.math3.fitting.PolynomialFitter:fit([D)[D 1.0
org.apache.commons.math3.analysis.polynomials.PolynomialFunction$Parametric:<init>()V 1.0
org.apache.commons.math3.fitting.CurveFitter:fit(Lorg/apache/commons/math3/analysis/ParametricUnivariateFunction;[D)[D 1.0
org.apache.commons.math3.fitting.CurveFitter:fit(ILorg/apache/commons/math3/analysis/ParametricUnivariateFunction;[D)[D 1.0
org.apache.commons.math3.fitting.CurveFitter$TheoreticalValuesFunction$1:<init>(Lorg/apache/commons/math3/fitting/CurveFitter$TheoreticalValuesFunction;)V 1.0
org.apache.commons.math3.fitting.CurveFitter$TheoreticalValuesFunction$2:<init>(Lorg/apache/commons/math3/fitting/CurveFitter$TheoreticalValuesFunction;)V 1.0
org.apache.commons.math3.fitting.CurveFitter$TheoreticalValuesFunction:<init>(Lorg/apache/commons/math3/fitting/CurveFitter;Lorg/apache/commons/math3/analysis/ParametricUnivariateFunction;)V 1.0
org.apache.commons.math3.fitting.CurveFitter$TheoreticalValuesFunction:getModelFunction()Lorg/apache/commons/math3/optim/nonlinear/vector/ModelFunction; 1.0
org.apache.commons.math3.fitting.CurveFitter$TheoreticalValuesFunction:getModelFunctionJacobian()Lorg/apache/commons/math3/optim/nonlinear/vector/ModelFunctionJacobian; 1.0
org.apache.commons.math3.fitting.WeightedObservedPoint:getWeight()D 1.0
org.apache.commons.math3.fitting.WeightedObservedPoint:getY()D 1.0
org.apache.commons.math3.fitting.WeightedObservedPoint:<init>(DDD)V 1.0
org.apache.commons.math3.fitting.CurveFitter:<init>(Lorg/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer;)V 1.0
org.apache.commons.math3.linear.BlockRealMatrix:copy()Lorg/apache/commons/math3/linear/BlockRealMatrix; 1.0
org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer:<init>()V 1.0
org.apache.commons.math3.analysis.polynomials.PolynomialFunction:value(D)D 1.0
org.apache.commons.math3.analysis.polynomials.PolynomialFunction:evaluate([DD)D 1.0
org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer:<init>(DDDDD)V 1.0
org.apache.commons.math3.linear.BlockRealMatrix:setEntry(IID)V 1.0
org.apache.commons.math3.analysis.polynomials.PolynomialFunction:<init>([D)V 1.0
org.apache.commons.math3.optim.nonlinear.vector.ModelFunctionJacobian:<init>(Lorg/apache/commons/math3/analysis/MultivariateMatrixFunction;)V 1.0
org.apache.commons.math3.optim.nonlinear.vector.ModelFunction:<init>(Lorg/apache/commons/math3/analysis/MultivariateVectorFunction;)V 1.0
org.apache.commons.math3.optim.nonlinear.vector.Target:<init>([D)V 1.0
org.apache.commons.math3.optim.nonlinear.vector.Weight:<init>([D)V 1.0
org.apache.commons.math3.optim.nonlinear.vector.Weight:getWeight()Lorg/apache/commons/math3/linear/RealMatrix; 1.0
org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer:optimize([Lorg/apache/commons/math3/optim/OptimizationData;)Lorg/apache/commons/math3/optim/PointVectorValuePair; 1.0
org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer:parseOptimizationData([Lorg/apache/commons/math3/optim/OptimizationData;)V 1.0
org.apache.commons.math3.optim.nonlinear.vector.JacobianMultivariateVectorOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V 1.0
org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V 1.0
org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V 1.0
org.apache.commons.math3.linear.BlockRealMatrix:<init>(II)V 1.0
org.apache.commons.math3.linear.BlockRealMatrix:createBlocksLayout(II)[[D 1.0
org.apache.commons.math3.optim.InitialGuess:<init>([D)V 1.0
org.apache.commons.math3.optim.MaxEval:<init>(I)V 1.0
org.apache.commons.math3.optim.BaseMultivariateOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V 1.0
org.apache.commons.math3.optim.BaseOptimizer$MaxEvalCallback:<init>(Lorg/apache/commons/math3/optim/BaseOptimizer$1;)V 1.0
org.apache.commons.math3.optim.BaseOptimizer$MaxIterCallback:<init>(Lorg/apache/commons/math3/optim/BaseOptimizer$1;)V 1.0
org.apache.commons.math3.optim.BaseOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V 1.0
org.apache.commons.math3.linear.BlockRealMatrix:getColumnDimension()I 1.0
org.apache.commons.math3.linear.BlockRealMatrix:getRowDimension()I 1.0
org.apache.commons.math3.linear.BlockRealMatrix:blockWidth(I)I 1.0
org.apache.commons.math3.linear.MatrixUtils:createRealMatrix(II)Lorg/apache/commons/math3/linear/RealMatrix; 1.0
org.apache.commons.math3.linear.MatrixUtils:checkMatrixIndex(Lorg/apache/commons/math3/linear/AnyMatrix;II)V 1.0
org.apache.commons.math3.linear.AbstractRealMatrix:<init>(II)V 1.0
org.apache.commons.math3.linear.MatrixUtils:checkRowIndex(Lorg/apache/commons/math3/linear/AnyMatrix;I)V 1.0
org.apache.commons.math3.linear.MatrixUtils:checkColumnIndex(Lorg/apache/commons/math3/linear/AnyMatrix;I)V 1.0
org.apache.commons.math3.util.FastMath:min(II)I 1.0
org.apache.commons.math3.linear.RealLinearOperator:<init>()V 1.0
org.apache.commons.math3.util.Incrementor:<init>(ILorg/apache/commons/math3/util/Incrementor$MaxCountExceededCallback;)V 1.0
org.apache.commons.math3.util.MathUtils:checkNotNull(Ljava/lang/Object;)V 1.0
