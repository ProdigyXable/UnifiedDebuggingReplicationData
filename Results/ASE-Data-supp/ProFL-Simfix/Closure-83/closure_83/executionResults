|------------------------------------------------------|
|-------------checking necessary software--------------|
|------------------------------------------------------|
Find perl:/usr/bin/perl
Find git:/usr/bin/git
Find svn:/usr/bin/svn
|------------------------------------------------------|
|             set current testing project              |
|             Example 1 : ./run.sh chart 1             |
|             Example 2 : ./run.sh math 1              |
|------------------------------------------------------|
TEST :  closure_83
Profl test coverage file= /mnt/efs/fs1/XiaInformation/LineCoverage/Closure/83.txt
Profl method coverage file= /mnt/efs/fs1/XiaInformation/AllMethods/Closure/83.txt
Profl failing test file= /mnt/efs/fs1/XiaInformation/FailingTests/Closure/83.txt
|------------------------------------------------------|
|         checkout project from the Internet           |
|------------------------------------------------------|
[NOT] Removing directory]
Save closure-83 to /home/ubuntu/repair-tool/simfix/d4j/projects/closure/closure_83_buggy
|------------------------------------------------------|
|                     run simfix                       |
|------------------------------------------------------|
Executing Profl-based Simfix
Setting profl parameter to /mnt/efs/fs1/XiaInformation/LineCoverage/Closure/83.txt from '--profl_test=/mnt/efs/fs1/XiaInformation/LineCoverage/Closure/83.txt'
Setting profl parameter to /mnt/efs/fs1/XiaInformation/AllMethods/Closure/83.txt from '--profl_method=/mnt/efs/fs1/XiaInformation/AllMethods/Closure/83.txt'
Setting profl parameter to /mnt/efs/fs1/XiaInformation/FailingTests/Closure/83.txt from '--profl_fail=/mnt/efs/fs1/XiaInformation/FailingTests/Closure/83.txt'
/home/ubuntu/repair-tool/simfix/d4j/projects
=================================================
Project : closure_83	start : 20/05/27 22:49

Field type inconsistancy 'THIS' with types : Token and int
Variable type inconsistancy of 'name' in method 'visit,NodeTraversal,Node,Node' with types : Name and String
Field type inconsistancy 'errors' with types : JSError[] and List<JSError>
Field type inconsistancy 'type' with types : Type and JSType
[Originally FAILING test case] com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2

Reading test line coverage from /mnt/efs/fs1/XiaInformation/LineCoverage/Closure/83.txt
Reading method line coverage from /mnt/efs/fs1/XiaInformation/AllMethods/Closure/83.txt
Writing sbfl final results to /home/ubuntu/repair-tool/simfix/runnable/proflResults/closure_83/generalSusInfo.profl
TIMEOUT : 18000000
Modified method com.google.javascript.jscomp.CommandLineRunner:initConfigFromFlags([Ljava/lang/String;Ljava/io/PrintStream;)V at line=432
Find no block!
Modified method com.google.javascript.jscomp.CommandLineRunner:initConfigFromFlags([Ljava/lang/String;Ljava/io/PrintStream;)V at line=433
======== PATCH BEGIN ========
TRUES=extractList(config.getString("jsdoc.annotations"));
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
System.err.println();
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
-------- PROCESSING TESTS BEGIN --------
TESTING single test: com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
TESTING test suite for: closure_83
File modified = com.google.javascript.jscomp.CommandLineRunner from lines 429 to 444
Method modified = com.google.javascript.jscomp.CommandLineRunner:initConfigFromFlags([Ljava/lang/String;Ljava/io/PrintStream;)V
NoneFix detected
-------- PROCESSING TESTS END --------
Test suite failed: /home/ubuntu/repair-tool/simfix/runnable/log/closure/Attempt_5_mod1_83.tests
======== PATCH BEGIN ========
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
varsToDeclareInExterns.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.add("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
props.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
isConfigValid=false;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
-------- PROCESSING TESTS BEGIN --------
TESTING single test: com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
TESTING test suite for: closure_83
File modified = com.google.javascript.jscomp.CommandLineRunner from lines 429 to 444
Method modified = com.google.javascript.jscomp.CommandLineRunner:initConfigFromFlags([Ljava/lang/String;Ljava/io/PrintStream;)V
NoneFix detected
-------- PROCESSING TESTS END --------
Test suite failed: /home/ubuntu/repair-tool/simfix/runnable/log/closure/Attempt_29_mod1_83.tests
======== PATCH BEGIN ========
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
if(debug&&!isConfigValid){
if(version){
throw new IllegalStateException("Unexpected const change.\n"+"  name: "+output_wrapper);
}
}
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
new JsonML(TagType.RegExpExpr).setAttribute(TagAttr.FLAGS,configResource);
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
new FileOutputStream(configResource).flush();
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
new FileOutputStream(configResource).close();
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
new FileOutputStream(configResource).flush();
new FileOutputStream(configResource).close();

ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.valueOf("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
cssNames.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
compiler.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
parts[i]=output_wrapper;
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.checkState("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
add(configResource);
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
quotedNames.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
externPropertyNames.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
externedNames.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
reservedNames.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
callNodeToParentMap.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
symbolGraph.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
add("get ");
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
add("set ");
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
stringNodesToRename.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
countPropertyOccurrence(configResource);
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
consumeToken();
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
type=getNativeType(UNKNOWN_TYPE);
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
globals.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
summary_detail_level++;
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.checkNotNull("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
isConfigValid=isConfigValid;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
-------- PROCESSING TESTS BEGIN --------
TESTING single test: com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
TESTING test suite for: closure_83
File modified = com.google.javascript.jscomp.CommandLineRunner from lines 429 to 444
Method modified = com.google.javascript.jscomp.CommandLineRunner:initConfigFromFlags([Ljava/lang/String;Ljava/io/PrintStream;)V
NoneFix detected
-------- PROCESSING TESTS END --------
Test suite failed: /home/ubuntu/repair-tool/simfix/runnable/log/closure/Attempt_373_mod1_83.tests
======== PATCH BEGIN ========
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
expectedConst=false;
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
if(null.isConstant()){
expectedConst=true;
}else {
expectedConst=false;
}
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
expectedConst=false;
if(null.isConstant()){
expectedConst=true;
}else {
expectedConst=false;
}

ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
mustMatchToken(Token.LP,"msg.no.paren.catch");
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
mustMatchToken(Token.NAME,"msg.bad.catchcond");
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
reportCodeChange();
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.append("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
-------- PROCESSING TESTS BEGIN --------
TESTING single test: com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
TESTING test suite for: closure_83
File modified = com.google.javascript.jscomp.CommandLineRunner from lines 429 to 444
Method modified = com.google.javascript.jscomp.CommandLineRunner:initConfigFromFlags([Ljava/lang/String;Ljava/io/PrintStream;)V
NoneFix detected
-------- PROCESSING TESTS END --------
Test suite failed: /home/ubuntu/repair-tool/simfix/runnable/log/closure/Attempt_401_mod2_83.tests
======== PATCH BEGIN ========
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
replacement=p.newName;
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.checkArgument("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
unknownNameUse.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
config.setUnknown(true);
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
allInstantiatedTypes.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
Node.newString(null).copyInformationFrom(config);
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
Node.newString(null).copyInformationFrom(config);
reportCodeChange();

ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

Preconditions.checkState(summary_detail_level==2,"Bad GETPROP: expected 2 children, but got %s",childCount);
if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(isConfigValid){
add(")");
}
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
add(".");
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
externMethodsWithoutSignatures.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
externMethods.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

Preconditions.checkArgument(output_wrapper!=null&&output_wrapper!=null);
if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
reads.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

prop.readCount++;
if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
prop.writes=null;
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.setDesc("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.setIsHidden("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.report("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(config.getType()!=Token.STRING){
return ;
}
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(!config.isDeclared(output_wrapper,false)){
return ;
}
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
defineSlot(stub.node,stub.node.getParent(),processedArgs.getNativeObjectType(UNKNOWN_TYPE),true);
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
writes.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

prop.writeCount++;
if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
prop.reads=null;
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
renameMap.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
token=next();
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
compiler.report("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
typesToSkip.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
TRUES.remove(output_wrapper);
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(!isPrototypeMethodDefinition(defSite.node)){
return ;
}
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
rewriteDefinition(defSite.node,getRewrittenMethodName(defSite.node.getLastChild().getString()));
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
Preconditions.checkState(args.getType()==Token.LP);
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(!processedArgs.equals(configResource)){
return ;
}
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
-------- PROCESSING TESTS BEGIN --------
TESTING single test: com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
TESTING test suite for: closure_83
File modified = com.google.javascript.jscomp.CommandLineRunner from lines 429 to 444
Method modified = com.google.javascript.jscomp.CommandLineRunner:initConfigFromFlags([Ljava/lang/String;Ljava/io/PrintStream;)V
NoneFix detected
-------- PROCESSING TESTS END --------
Test suite failed: /home/ubuntu/repair-tool/simfix/runnable/log/closure/Attempt_575_mod1_83.tests
======== PATCH BEGIN ========
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
compiler.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(output_wrapper.length()==0){
return ;
}
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
case Token.GETPROP :

isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
compiler.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
compiler.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
case Token.THIS :

isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
if(config!=TernaryValue.UNKNOWN){
int (config.toBoolean(true))?Token.TRUE:Token.FALSE=(config.toBoolean(true))?Token.TRUE:Token.FALSE;
reportCodeChange();
}
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
config.setJSType(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(match(JsDocToken.LT)){
next();
skipEOLs();
Node parseTypeExpressionList(next())=parseTypeExpressionList(next());
if(memberType!=null){
config.addChildToFront(memberType);
skipEOLs();
if(!match(JsDocToken.GT)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.gt");
}
next();
}
}
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
case Token.FUNCTION :

isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
default :

isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(config.getNext().getType()!=Token.STRING){
return ;
}
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(config.getNext().getQualifiedName()==null){
return ;
}
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(config.getNext().getNext().getType()!=Token.STRING){
return ;
}
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
externMethodsWithoutSignatures.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

case Token.GETPROP :

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
case Token.OBJECTLIT :

isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
case Token.CALL :

isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
case Token.ADD :

isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
case Token.NULL :

isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
case Token.NUMBER :

isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
case Token.SET :

isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
case VAR_DECL_SIMPLE_ASSIGNMENT :

isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
case Token.CATCH :

isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
case Token.NEG :

isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
case Token.DELPROP :

isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
case Token.SHEQ :

isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
case Token.SHNE :

isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
case Token.ASSIGN :

isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
Modified method com.google.javascript.jscomp.CommandLineRunner:initConfigFromFlags([Ljava/lang/String;Ljava/io/PrintStream;)V at line=434
Modified method com.google.javascript.jscomp.CommandLineRunner$Flags$BooleanOptionHandler:getDefaultMetaVariable()Ljava/lang/String; at line=355
Modified method com.google.javascript.jscomp.CommandLineRunner:initConfigFromFlags([Ljava/lang/String;Ljava/io/PrintStream;)V at line=447
======== PATCH BEGIN ========
if(!isConfigValid&&flags.display_help){
isConfigValid=false;
parser.printUsage(err);
}else {
getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party?new DefaultCodingConvention():new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setOutputWrapperMarker(flags.output_wrapper_marker).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setClosureEntryPoints(flags.closure_entry_point).setOutputManifest(flags.output_manifest);
}
-------- PATCH END --------
-------- PROCESSING TESTS BEGIN --------
TESTING single test: com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
TESTING test suite for: closure_83
File modified = com.google.javascript.jscomp.CommandLineRunner from lines 446 to 483
Method modified = com.google.javascript.jscomp.CommandLineRunner:initConfigFromFlags([Ljava/lang/String;Ljava/io/PrintStream;)V
NoneFix detected
-------- PROCESSING TESTS END --------
Test suite failed: /home/ubuntu/repair-tool/simfix/runnable/log/closure/Attempt_853_mod1_83.tests
======== PATCH BEGIN ========
if(ref.module!=declaration.module){
isConfigValid=false;
parser.printUsage(err);
}else {
getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party?new DefaultCodingConvention():new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setOutputWrapperMarker(flags.output_wrapper_marker).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setClosureEntryPoints(flags.closure_entry_point).setOutputManifest(flags.output_manifest);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
Compiler.setLoggingLevel(Level.OFF);
if(!isConfigValid||flags.display_help){
isConfigValid=false;
parser.printUsage(err);
}else {
getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party?new DefaultCodingConvention():new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setOutputWrapperMarker(flags.output_wrapper_marker).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setClosureEntryPoints(flags.closure_entry_point).setOutputManifest(flags.output_manifest);
}
-------- PATCH END --------
-------- PROCESSING TESTS BEGIN --------
TESTING single test: com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
TESTING test suite for: closure_83
File modified = com.google.javascript.jscomp.CommandLineRunner from lines 446 to 483
Method modified = com.google.javascript.jscomp.CommandLineRunner:initConfigFromFlags([Ljava/lang/String;Ljava/io/PrintStream;)V
NoneFix detected
-------- PROCESSING TESTS END --------
Test suite failed: /home/ubuntu/repair-tool/simfix/runnable/log/closure/Attempt_857_mod1_83.tests
======== PATCH BEGIN ========
if(!isConfigValid||d.module){
isConfigValid=false;
parser.printUsage(err);
}else {
getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party?new DefaultCodingConvention():new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setOutputWrapperMarker(flags.output_wrapper_marker).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setClosureEntryPoints(flags.closure_entry_point).setOutputManifest(flags.output_manifest);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
Modified method com.google.javascript.jscomp.CommandLineRunner:initConfigFromFlags([Ljava/lang/String;Ljava/io/PrintStream;)V at line=448
Modified method com.google.javascript.jscomp.CommandLineRunner$FormattingOption:<clinit>()V at line=363
Find no block!
Modified method com.google.javascript.jscomp.CommandLineRunner$FormattingOption:<clinit>()V at line=364
Find no block!
Modified method com.google.javascript.jscomp.CommandLineRunner$FormattingOption:<clinit>()V at line=365
Find no block!
Modified method com.google.javascript.jscomp.CommandLineRunner$Flags$BooleanOptionHandler:parseArguments(Lorg/kohsuke/args4j/spi/Parameters;)I at line=334
======== PATCH BEGIN ========
if(stripNameSuffixes.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(stripNamePrefixes.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(externMethods.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(nonMethodProperties.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(goodFunctionNodes.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(implementedInterfaces.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(reservedNames.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(tryNodesContainingReturnStatements.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(FALSES.contains(variable_map_output_file)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(FALSES.contains(lowerParam)){
TRUES.add(variable_map_output_file);
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
TRUES.add(variable_map_output_file);
setter.addValue(true);
return 0;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(externMethodsWithoutSignatures.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(badFunctionNodes.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(unflowableVarNames.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(namesNeedingTemps.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(phNames.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(externNames.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(FALSES.contains(a.oldName)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(referencedNames.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(usedPlaceholders.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(depends.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(assertionNames.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(parameters.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(externedNames.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(FALSES.contains(lowerParam)){
if(!getSubTypes(lowerParam,setter)){
return false;
}
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
if(!getSubTypes(lowerParam,setter)){
return false;
}
setter.addValue(true);
return 0;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(noSideEffectFunctionNames.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(FALSES.contains(lowerParam)){
setter.set(false);
}else {
setter.addValue(true);
return 0;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.set(true);
return 0;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(taintedLocals.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(suppressionNames.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(FALSES.contains(lowerParam)){
setter.checkNotNull(false);
}else {
setter.addValue(true);
return 0;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(FALSES.contains(lowerParam)){
countPropertyOccurrence(lowerParam);
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
countPropertyOccurrence(lowerParam);
setter.addValue(true);
return 0;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(REGEXP_METHODS.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(varsToDeclareInExterns.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(dirtySymbols.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(globalNames.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(FALSES.contains(File.separator)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
Preconditions.checkState(!setter.isEmpty());
if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
Preconditions.checkState(setter.contains(lowerParam));
if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(modifiesAnnotationKeywords.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(prototypeObjLits.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(externalNoShadowVariableNames.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(FALSES.contains(lowerParam)){
continue;
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(names.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(FALSES.isFunctionObjectCallOrApply(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.add(a.oldName);
setter.addValue(true);
return 0;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(reservedNames.contains(a.oldName)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(ALLOWED_DIRECTIVES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(FALSES.contains(lowerParam)){
setter.getDirectives().add(lowerParam);
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(FALSES.contains(lowerParam)){
setter.setDirectives(setter.getDirectives());
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(FALSES.contains(lowerParam)){
setter.getDirectives().add(lowerParam);
setter.setDirectives(setter.getDirectives());

setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(namesToAlias.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(FALSES.contains(lowerParam)){
setter.add(false);
}else {
setter.addValue(true);
return 0;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.add(true);
return 0;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(oldName.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(externNames.contains(a.oldName)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(typesToSkip.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(whitelist.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(nonNullableTypeNames.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(FALSES.contains(lowerParam)){
if(debug||!debug||!debug){
return debug;
}
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
if(debug||!debug||!debug){
return debug;
}
setter.addValue(true);
return 0;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(stripNameSuffixes.contains(lowerParam)){
setter.addValue(true);
}else if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(stripNamePrefixes.contains(lowerParam)){
setter.addValue(true);
}else if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(externMethods.contains(lowerParam)){
setter.addValue(true);
}else if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(nonMethodProperties.contains(lowerParam)){
setter.addValue(true);
}else if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(goodFunctionNodes.contains(lowerParam)){
setter.addValue(true);
}else if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(TRUES.contains(lowerParam)){
setter.addValue(true);
}else if(badFunctionNodes.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(TRUES.contains(lowerParam)){
if(setter.contains(lowerParam)){
return ;
}
setter.addValue(true);
}else if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(TRUES.contains(lowerParam)){
TRUES.add(lowerParam);
setter.addValue(true);
}else if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}
-------- PATCH END --------
-------- PROCESSING TESTS BEGIN --------
TESTING single test: com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
TESTING test suite for: closure_83
File modified = com.google.javascript.jscomp.CommandLineRunner from lines 341 to 348
Method modified = com.google.javascript.jscomp.CommandLineRunner$Flags$BooleanOptionHandler:parseArguments(Lorg/kohsuke/args4j/spi/Parameters;)I
NoneFix detected
-------- PROCESSING TESTS END --------
Test suite failed: /home/ubuntu/repair-tool/simfix/runnable/log/closure/Attempt_1107_mod1_83.tests
======== PATCH BEGIN ========
if(BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(lowerParam)){
setter.addValue(true);
}else if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(implementedInterfaces.contains(lowerParam)){
setter.addValue(true);
}else if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(reservedNames.contains(lowerParam)){
setter.addValue(true);
}else if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(tryNodesContainingReturnStatements.contains(lowerParam)){
setter.addValue(true);
}else if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(externNames.contains(lowerParam)){
setter.addValue(true);
}else if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(TRUES.contains(a.oldName)){
setter.addValue(true);
}else if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(externMethodsWithoutSignatures.contains(lowerParam)){
setter.addValue(true);
}else if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(badFunctionNodes.contains(lowerParam)){
setter.addValue(true);
}else if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(unflowableVarNames.contains(lowerParam)){
setter.addValue(true);
}else if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(namesNeedingTemps.contains(lowerParam)){
setter.addValue(true);
}else if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(phNames.contains(lowerParam)){
setter.addValue(true);
}else if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(referencedNames.contains(lowerParam)){
setter.addValue(true);
}else if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(usedPlaceholders.contains(lowerParam)){
setter.addValue(true);
}else if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(depends.contains(lowerParam)){
setter.addValue(true);
}else if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(assertionNames.contains(lowerParam)){
setter.addValue(true);
}else if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(parameters.contains(lowerParam)){
setter.addValue(true);
}else if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(lowerParam)){
setter.addValue(true);
}else if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(externedNames.contains(lowerParam)){
setter.addValue(true);
}else if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(TRUES.contains(lowerParam)){
setter.set(true);
}else if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(noSideEffectFunctionNames.contains(lowerParam)){
setter.addValue(true);
}else if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(taintedLocals.contains(lowerParam)){
setter.addValue(true);
}else if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(TRUES.contains(module)){
setter.addValue(true);
}else if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(TRUES.contains(lowerParam)){
countPropertyOccurrence(lowerParam);
setter.addValue(true);
}else if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(suppressionNames.contains(lowerParam)){
setter.addValue(true);
}else if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(TRUES.contains(lowerParam)){
setter.checkNotNull(true);
}else if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(dirtySymbols.contains(lowerParam)){
setter.addValue(true);
}else if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(REGEXP_METHODS.contains(lowerParam)){
setter.addValue(true);
}else if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(TRUES.contains(lowerParam)){
setter.addValue(true);
}else if(STRING_REGEXP_METHODS.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(lowerParam)){
setter.addValue(true);
}else if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(globalNames.contains(lowerParam)){
setter.addValue(true);
}else if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(TRUES.contains(File.separator)){
setter.addValue(true);
}else if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(varsToDeclareInExterns.contains(lowerParam)){
setter.addValue(true);
}else if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(TRUES.contains(lowerParam)){
setter.addValue(true);
}else if(FALSES.isFunction(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(modifiesAnnotationKeywords.contains(lowerParam)){
setter.addValue(true);
}else if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(TRUES.contains(lowerParam)){
setter.add(true);
}else if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(TRUES.contains(lowerParam)){
setter.addValue(true);
}else if(FALSES.contains(lowerParam)){
setter.add(false);
}else {
setter.addValue(true);
return 0;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(TRUES.contains(lowerParam)){
setter.addValue(true);
}else if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.add(true);
return 0;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(names.contains(lowerParam)){
setter.addValue(true);
}else if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(prototypeObjLits.contains(lowerParam)){
setter.addValue(true);
}else if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(externalNoShadowVariableNames.contains(lowerParam)){
setter.addValue(true);
}else if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(TRUES.contains(lowerParam)){
continue;
setter.addValue(true);
}else if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(reservedNames.contains(a.oldName)){
setter.addValue(true);
}else if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(oldName.contains(lowerParam)){
setter.addValue(true);
}else if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(externNames.contains(a.oldName)){
setter.addValue(true);
}else if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
Preconditions.checkState(!setter.isEmpty());
if(TRUES.contains(lowerParam)){
setter.addValue(true);
}else if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(namesToAlias.contains(lowerParam)){
setter.addValue(true);
}else if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(TRUES.isFunctionObjectCallOrApply(lowerParam)){
setter.addValue(true);
}else if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(typesToSkip.contains(lowerParam)){
setter.addValue(true);
}else if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(ALLOWED_DIRECTIVES.contains(lowerParam)){
setter.addValue(true);
}else if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(TRUES.contains(lowerParam)){
setter.getDirectives().add(lowerParam);
setter.addValue(true);
}else if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(TRUES.contains(lowerParam)){
setter.setDirectives(setter.getDirectives());
setter.addValue(true);
}else if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(TRUES.contains(lowerParam)){
setter.getDirectives().add(lowerParam);
setter.setDirectives(setter.getDirectives());

setter.addValue(true);
}else if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(whitelist.contains(lowerParam)){
setter.addValue(true);
}else if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(TRUES.contains(lowerParam)){
if(debug||!debug||!debug){
return debug;
}
setter.addValue(true);
}else if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(nonNullableTypeNames.contains(lowerParam)){
setter.addValue(true);
}else if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
Modified method com.google.javascript.jscomp.SourceFile:<init>(Ljava/lang/String;)V at line=79
Find no block!
Modified method com.google.javascript.jscomp.SourceFile:<init>(Ljava/lang/String;)V at line=62
Find no block!
Modified method com.google.javascript.jscomp.SourceFile:<init>(Ljava/lang/String;)V at line=70
Find no block!
Modified method com.google.javascript.jscomp.SourceFile:<init>(Ljava/lang/String;)V at line=80
======== PATCH BEGIN ========
super(fileName);
this.fileName=fileName;
this.lastOffset=0;
this.lastLine=1;
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
this.fileName=fileName;
this.lastOffset=lastOffset;
this.lastLine=1;
-------- PATCH END --------
-------- PROCESSING TESTS BEGIN --------
TESTING single test: com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
TESTING test suite for: closure_83
File modified = com.google.javascript.jscomp.SourceFile from lines 80 to 83
Method modified = com.google.javascript.jscomp.SourceFile:<init>(Ljava/lang/String;)V
NoneFix detected
-------- PROCESSING TESTS END --------
Test suite failed: /home/ubuntu/repair-tool/simfix/runnable/log/closure/Attempt_1559_mod1_83.tests
======== PATCH BEGIN ========
this.fileName=fileName;
this.lastOffset=0;
Preconditions.checkState(fileName.equals(file.getName()));
this.lastLine=1;
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
this.fileName=fileName;
this.lastOffset=SOURCE_EXCERPT_REGION_LENGTH;
this.lastLine=1;
-------- PATCH END --------
-------- PROCESSING TESTS BEGIN --------
TESTING single test: com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
TESTING test suite for: closure_83
File modified = com.google.javascript.jscomp.SourceFile from lines 80 to 83
Method modified = com.google.javascript.jscomp.SourceFile:<init>(Ljava/lang/String;)V
NoneFix detected
-------- PROCESSING TESTS END --------
Test suite failed: /home/ubuntu/repair-tool/simfix/runnable/log/closure/Attempt_1563_mod1_83.tests
======== PATCH BEGIN ========
this.fileName=fileName;
this.lastOffset=0;
this.lastLine=SOURCE_EXCERPT_REGION_LENGTH;
-------- PATCH END --------
-------- PROCESSING TESTS BEGIN --------
TESTING single test: com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
TESTING test suite for: closure_83
File modified = com.google.javascript.jscomp.SourceFile from lines 80 to 83
Method modified = com.google.javascript.jscomp.SourceFile:<init>(Ljava/lang/String;)V
NoneFix detected
-------- PROCESSING TESTS END --------
Test suite failed: /home/ubuntu/repair-tool/simfix/runnable/log/closure/Attempt_1563_mod2_83.tests
======== PATCH BEGIN ========
this.fileName=fileName;
this.lastOffset=SOURCE_EXCERPT_REGION_LENGTH;
this.lastLine=SOURCE_EXCERPT_REGION_LENGTH;
-------- PATCH END --------
-------- PROCESSING TESTS BEGIN --------
TESTING single test: com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
TESTING test suite for: closure_83
File modified = com.google.javascript.jscomp.SourceFile from lines 80 to 83
Method modified = com.google.javascript.jscomp.SourceFile:<init>(Ljava/lang/String;)V
NoneFix detected
-------- PROCESSING TESTS END --------
Test suite failed: /home/ubuntu/repair-tool/simfix/runnable/log/closure/Attempt_1564_mod1_83.tests
Modified method com.google.javascript.jscomp.SourceFile:<init>(Ljava/lang/String;)V at line=82
Modified method com.google.javascript.jscomp.SourceFile:<init>(Ljava/lang/String;)V at line=83
Modified method com.google.javascript.jscomp.SourceFile:<init>(Ljava/lang/String;)V at line=84
Find no block!
Modified method com.google.javascript.jscomp.SourceFile:setCode(Ljava/lang/String;)V at line=110
======== PATCH BEGIN ========
code=code;
-------- PATCH END --------
-------- PROCESSING TESTS BEGIN --------
TESTING single test: com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
TESTING test suite for: closure_83
File modified = com.google.javascript.jscomp.SourceFile from lines 110 to 110
Method modified = com.google.javascript.jscomp.SourceFile:setCode(Ljava/lang/String;)V
NoneFix detected
-------- PROCESSING TESTS END --------
Test suite failed: /home/ubuntu/repair-tool/simfix/runnable/log/closure/Attempt_1577_mod1_83.tests
Modified method com.google.javascript.jscomp.SourceFile:setCode(Ljava/lang/String;)V at line=111
Find no block!
Modified method com.google.javascript.jscomp.SourceFile:setOriginalPath(Ljava/lang/String;)V at line=118
Modified method com.google.javascript.jscomp.SourceFile:setOriginalPath(Ljava/lang/String;)V at line=119
Find no block!
Modified method com.google.javascript.jscomp.SourceFile:getName()Ljava/lang/String; at line=136
======== PATCH BEGIN ========
return originalPath!=null?originalPath:fileName;
-------- PATCH END --------
-------- PROCESSING TESTS BEGIN --------
TESTING single test: com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
TESTING test suite for: closure_83
File modified = com.google.javascript.jscomp.SourceFile from lines 136 to 136
Method modified = com.google.javascript.jscomp.SourceFile:getName()Ljava/lang/String;
NoneFix detected
-------- PROCESSING TESTS END --------
Test suite failed: /home/ubuntu/repair-tool/simfix/runnable/log/closure/Attempt_1637_mod1_83.tests
======== PATCH BEGIN ========
return originalPath;
-------- PATCH END --------
-------- PROCESSING TESTS BEGIN --------
TESTING single test: com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
TESTING test suite for: closure_83
File modified = com.google.javascript.jscomp.SourceFile from lines 136 to 136
Method modified = com.google.javascript.jscomp.SourceFile:getName()Ljava/lang/String;
NoneFix detected
-------- PROCESSING TESTS END --------
Test suite failed: /home/ubuntu/repair-tool/simfix/runnable/log/closure/Attempt_1637_mod2_83.tests
Modified method com.google.javascript.jscomp.SourceFile:fromCode(Ljava/lang/String;Ljava/lang/String;)Lcom/google/javascript/jscomp/SourceFile; at line=257
Modified method com.google.javascript.jscomp.SourceFile:access$000(Lcom/google/javascript/jscomp/SourceFile;Ljava/lang/String;)V at line=40
Find no block!
Modified method com.google.javascript.jscomp.JSSourceFile:<init>(Lcom/google/javascript/jscomp/SourceFile;)V at line=72
UNKNOWN ASTNode type : catch (IOException e) {
  errorManager.report(CheckLevel.ERROR,JSError.make(AbstractCompiler.READ_ERROR,getName()));
  return ImmutableList.<String>of();
}

UNKNOWN ASTNode type : catch (IOException e) {
  errorManager.report(CheckLevel.ERROR,JSError.make(AbstractCompiler.READ_ERROR,getName()));
  return ImmutableList.<String>of();
}

UNKNOWN ASTNode type : catch (JSModuleGraph.ModuleDependenceException e) {
  report(JSError.make(MODULE_DEPENDENCY_ERROR,e.getModule().getName(),e.getDependentModule().getName()));
  return;
}

UNKNOWN ASTNode type : catch (JSModuleGraph.ModuleDependenceException e) {
  report(JSError.make(MODULE_DEPENDENCY_ERROR,e.getModule().getName(),e.getDependentModule().getName()));
  return;
}

======== PATCH BEGIN ========
super(referenced.getName());
this.referenced=sourceFile;
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
Modified method com.google.javascript.jscomp.JSSourceFile:<init>(Lcom/google/javascript/jscomp/SourceFile;)V at line=73
Modified method com.google.javascript.jscomp.JSSourceFile:<init>(Lcom/google/javascript/jscomp/SourceFile;)V at line=74
Find no block!
Modified method com.google.javascript.jscomp.JSSourceFile:fromCode(Ljava/lang/String;Ljava/lang/String;)Lcom/google/javascript/jscomp/JSSourceFile; at line=55
Modified method com.google.javascript.jscomp.CommandLineRunner$Flags:<init>()V at line=83
Find no block!
Modified method com.google.javascript.jscomp.CommandLineRunner$Flags:<init>()V at line=84
Find no block!
Modified method com.google.javascript.jscomp.CommandLineRunner$Flags:<init>()V at line=89
Find no block!
Modified method com.google.javascript.jscomp.CommandLineRunner$Flags:<init>()V at line=94
Find no block!
Modified method com.google.javascript.jscomp.CommandLineRunner$Flags:<init>()V at line=100
Find no block!
Modified method com.google.javascript.jscomp.CommandLineRunner$Flags:<init>()V at line=106
Find no block!
Modified method com.google.javascript.jscomp.CommandLineRunner$Flags:<init>()V at line=112
Find no block!
Modified method com.google.javascript.jscomp.CommandLineRunner$Flags:<init>()V at line=119
Find no block!
Modified method com.google.javascript.jscomp.CommandLineRunner$Flags:<init>()V at line=125
Find no block!
Modified method com.google.javascript.jscomp.CommandLineRunner$Flags:<init>()V at line=130
Find no block!
Modified method com.google.javascript.jscomp.CommandLineRunner$Flags:<init>()V at line=134
Find no block!
Modified method com.google.javascript.jscomp.CommandLineRunner$Flags:<init>()V at line=139
Find no block!
Modified method com.google.javascript.jscomp.CommandLineRunner$Flags:<init>()V at line=148
Find no block!
Modified method com.google.javascript.jscomp.CommandLineRunner$Flags:<init>()V at line=153
Find no block!
Modified method com.google.javascript.jscomp.CommandLineRunner$Flags:<init>()V at line=158
Find no block!
Modified method com.google.javascript.jscomp.CommandLineRunner$Flags:<init>()V at line=163
Find no block!
Modified method com.google.javascript.jscomp.CommandLineRunner$Flags:<init>()V at line=172
Find no block!
Modified method com.google.javascript.jscomp.CommandLineRunner$Flags:<init>()V at line=177
Find no block!
Modified method com.google.javascript.jscomp.CommandLineRunner$Flags:<init>()V at line=184
Find no block!
Modified method com.google.javascript.jscomp.CommandLineRunner$Flags:<init>()V at line=192
Find no block!
Modified method com.google.javascript.jscomp.CommandLineRunner$Flags:<init>()V at line=197
Find no block!
Modified method com.google.javascript.jscomp.CommandLineRunner$Flags:<init>()V at line=202
Find no block!
Modified method com.google.javascript.jscomp.CommandLineRunner$Flags:<init>()V at line=209
Find no block!
Modified method com.google.javascript.jscomp.CommandLineRunner$Flags:<init>()V at line=215
Find no block!
Modified method com.google.javascript.jscomp.CommandLineRunner$Flags:<init>()V at line=223
Find no block!
Modified method com.google.javascript.jscomp.CommandLineRunner$Flags:<init>()V at line=228
Find no block!
Modified method com.google.javascript.jscomp.CommandLineRunner$Flags:<init>()V at line=233
Find no block!
Modified method com.google.javascript.jscomp.CommandLineRunner$Flags:<init>()V at line=238
Find no block!
Modified method com.google.javascript.jscomp.CommandLineRunner$Flags:<init>()V at line=247
Find no block!
Modified method com.google.javascript.jscomp.CommandLineRunner$Flags:<init>()V at line=252
Find no block!
Modified method com.google.javascript.jscomp.CommandLineRunner$Flags:<init>()V at line=258
Find no block!
Modified method com.google.javascript.jscomp.CommandLineRunner$Flags:<init>()V at line=263
Find no block!
Modified method com.google.javascript.jscomp.CommandLineRunner$Flags:<init>()V at line=268
Find no block!
Modified method com.google.javascript.jscomp.CommandLineRunner$Flags:<init>()V at line=273
Find no block!
Modified method com.google.javascript.jscomp.CommandLineRunner$Flags:<init>()V at line=279
Find no block!
Modified method com.google.javascript.jscomp.CommandLineRunner$Flags:<init>()V at line=285
Find no block!
Modified method com.google.javascript.jscomp.CommandLineRunner$Flags:<init>()V at line=294
Find no block!
Modified method com.google.javascript.jscomp.CommandLineRunner$Flags:<init>()V at line=304
Find no block!
Modified method com.google.javascript.jscomp.CommandLineRunner$Flags:<init>()V at line=313
Find no block!
Modified method com.google.javascript.jscomp.CommandLineRunner$Flags$BooleanOptionHandler:<clinit>()V at line=320
Find no block!
Modified method com.google.javascript.jscomp.SourceMap$DetailLevel:<clinit>()V at line=52
Find no block!
Modified method com.google.javascript.jscomp.SourceMap$DetailLevel$1:<init>(Ljava/lang/String;I)V at line=55
Find no block!
Modified method com.google.javascript.jscomp.SourceMap$DetailLevel$2:<init>(Ljava/lang/String;I)V at line=62
Find no block!
Modified method com.google.javascript.jscomp.WarningLevel:<clinit>()V at line=26
Find no block!
Modified method com.google.javascript.jscomp.WarningLevel:<init>(Ljava/lang/String;I)V at line=45
Modified method com.google.javascript.jscomp.WarningLevel:<clinit>()V at line=27
Find no block!
Modified method com.google.javascript.jscomp.WarningLevel:<clinit>()V at line=29
Find no block!
Modified method com.google.javascript.jscomp.WarningLevel:<clinit>()V at line=31
Find no block!
Modified method com.google.javascript.jscomp.CommandLineRunner$Flags$BooleanOptionHandler:<init>(Lorg/kohsuke/args4j/CmdLineParser;Lorg/kohsuke/args4j/OptionDef;Lorg/kohsuke/args4j/spi/Setter;)V at line=329
Modified method com.google.javascript.jscomp.CommandLineRunner$Flags$BooleanOptionHandler:<init>(Lorg/kohsuke/args4j/CmdLineParser;Lorg/kohsuke/args4j/OptionDef;Lorg/kohsuke/args4j/spi/Setter;)V at line=330
Find no block!
Modified method com.google.javascript.jscomp.CommandLineRunner$Flags$BooleanOptionHandler:<clinit>()V at line=321
Find no block!
Modified method com.google.javascript.jscomp.CommandLineRunner$Flags$BooleanOptionHandler:<clinit>()V at line=323
Find no block!
Modified method com.google.javascript.jscomp.CommandLineRunner:<init>([Ljava/lang/String;)V at line=382
Find no block!
Modified method com.google.javascript.jscomp.CommandLineRunner:<init>([Ljava/lang/String;)V at line=387
Find no block!
Modified method com.google.javascript.jscomp.CommandLineRunner:<init>([Ljava/lang/String;Ljava/io/PrintStream;Ljava/io/PrintStream;)V at line=400
UNKNOWN ASTNode type : catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

UNKNOWN ASTNode type : catch (AbstractCommandLineRunner.FlagUsageException e) {
  System.err.println(e.getMessage());
  result=-1;
}

======== PATCH BEGIN ========
super(out,err);
initConfigFromFlags(args,System.err);
-------- PATCH END --------
-------- PROCESSING TESTS BEGIN --------
TESTING single test: com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
TESTING test suite for: closure_83
File modified = com.google.javascript.jscomp.CommandLineRunner from lines 400 to 401
Method modified = com.google.javascript.jscomp.CommandLineRunner:<init>([Ljava/lang/String;Ljava/io/PrintStream;Ljava/io/PrintStream;)V
NoneFix detected
-------- PROCESSING TESTS END --------
Test suite failed: /home/ubuntu/repair-tool/simfix/runnable/log/closure/Attempt_1947_mod1_83.tests
Modified method com.google.javascript.jscomp.CommandLineRunner:<init>([Ljava/lang/String;Ljava/io/PrintStream;Ljava/io/PrintStream;)V at line=401
Modified method com.google.javascript.jscomp.CommandLineRunner:<init>([Ljava/lang/String;Ljava/io/PrintStream;Ljava/io/PrintStream;)V at line=402
Find no block!
Modified method com.google.javascript.jscomp.CommandLineRunner:<clinit>()V at line=525
Find no block!
Modified method com.google.javascript.jscomp.CommandLineRunner:initConfigFromFlags([Ljava/lang/String;Ljava/io/PrintStream;)V at line=408
======== PATCH BEGIN ========
Lists.newArrayList().add("goog.exportSymbol");
Pattern argPattern=Pattern.compile("(--[a-zA-Z_]+)=(.*)");
Pattern quotesPattern=Pattern.compile("^[\'\"](.*)[\'\"]$");
List<String> processedArgs=Lists.newArrayList();
-------- PATCH END --------
-------- PROCESSING TESTS BEGIN --------
TESTING single test: com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
TESTING test suite for: closure_83
File modified = com.google.javascript.jscomp.CommandLineRunner from lines 408 to 410
Method modified = com.google.javascript.jscomp.CommandLineRunner:initConfigFromFlags([Ljava/lang/String;Ljava/io/PrintStream;)V
NoneFix detected
-------- PROCESSING TESTS END --------
Test suite failed: /home/ubuntu/repair-tool/simfix/runnable/log/closure/Attempt_1967_mod1_83.tests
======== PATCH BEGIN ========
processedArgs.add("goog.exportProperty");
Pattern argPattern=Pattern.compile("(--[a-zA-Z_]+)=(.*)");
Pattern quotesPattern=Pattern.compile("^[\'\"](.*)[\'\"]$");
List<String> processedArgs=Lists.newArrayList();
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
Pattern argPattern=Pattern.newArrayList("(--[a-zA-Z_]+)=(.*)");
Pattern quotesPattern=Pattern.compile("^[\'\"](.*)[\'\"]$");
List<String> processedArgs=Lists.newArrayList();
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(debug){
processedArgs.add("extern");
}
Pattern argPattern=Pattern.compile("(--[a-zA-Z_]+)=(.*)");
Pattern quotesPattern=Pattern.compile("^[\'\"](.*)[\'\"]$");
List<String> processedArgs=Lists.newArrayList();
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(debug){
processedArgs.add("pure");
}
Pattern argPattern=Pattern.compile("(--[a-zA-Z_]+)=(.*)");
Pattern quotesPattern=Pattern.compile("^[\'\"](.*)[\'\"]$");
List<String> processedArgs=Lists.newArrayList();
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(options.runtimeTypeCheck){
Lists.newArrayList().add(runtimeTypeCheck);
}
Pattern argPattern=Pattern.compile("(--[a-zA-Z_]+)=(.*)");
Pattern quotesPattern=Pattern.compile("^[\'\"](.*)[\'\"]$");
List<String> processedArgs=Lists.newArrayList();
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
Lists.newArrayList().add(createEmptyPass("beforeStandardOptimizations"));
Pattern argPattern=Pattern.compile("(--[a-zA-Z_]+)=(.*)");
Pattern quotesPattern=Pattern.compile("^[\'\"](.*)[\'\"]$");
List<String> processedArgs=Lists.newArrayList();
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(argPattern.matcher(variable_map_output_file).matches()){
DEFAULT_EXTERNS_NAMES.add(quotesMatcher.group(1));
}else {
processedArgs.add(variable_map_output_file);
}
Pattern argPattern=Pattern.compile("(--[a-zA-Z_]+)=(.*)");
Pattern quotesPattern=Pattern.compile("^[\'\"](.*)[\'\"]$");
List<String> processedArgs=Lists.newArrayList();
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
Lists.newArrayList().addAll(getCodeRemovingPasses());
Pattern argPattern=Pattern.compile("(--[a-zA-Z_]+)=(.*)");
Pattern quotesPattern=Pattern.compile("^[\'\"](.*)[\'\"]$");
List<String> processedArgs=Lists.newArrayList();
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
generateHtmlReportHeader(new StringBuilder());
Pattern argPattern=Pattern.compile("(--[a-zA-Z_]+)=(.*)");
Pattern quotesPattern=Pattern.compile("^[\'\"](.*)[\'\"]$");
List<String> processedArgs=Lists.newArrayList();
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
new StringBuilder().append("<h1>Name Reference Graph Dump</h1>\n");
Pattern argPattern=Pattern.compile("(--[a-zA-Z_]+)=(.*)");
Pattern quotesPattern=Pattern.compile("^[\'\"](.*)[\'\"]$");
List<String> processedArgs=Lists.newArrayList();
-------- PATCH END --------
-------- PROCESSING TESTS BEGIN --------
TESTING single test: com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
TESTING test suite for: closure_83
File modified = com.google.javascript.jscomp.CommandLineRunner from lines 408 to 410
Method modified = com.google.javascript.jscomp.CommandLineRunner:initConfigFromFlags([Ljava/lang/String;Ljava/io/PrintStream;)V
NoneFix detected
-------- PROCESSING TESTS END --------
Test suite failed: /home/ubuntu/repair-tool/simfix/runnable/log/closure/Attempt_2081_mod3_83.tests
======== PATCH BEGIN ========
new StringBuilder().append("<h1>Name Reference Graph Dump</h1>\n");
Pattern argPattern=Pattern.newArrayList("(--[a-zA-Z_]+)=(.*)");
Pattern quotesPattern=Pattern.compile("^[\'\"](.*)[\'\"]$");
List<String> processedArgs=Lists.newArrayList();
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
Collections.sort(Lists.newArrayList(getAllModules()),new DepthComparator());
Pattern argPattern=Pattern.compile("(--[a-zA-Z_]+)=(.*)");
Pattern quotesPattern=Pattern.compile("^[\'\"](.*)[\'\"]$");
List<String> processedArgs=Lists.newArrayList();
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
Collections.sort(Lists.newArrayList());
Pattern argPattern=Pattern.compile("(--[a-zA-Z_]+)=(.*)");
Pattern quotesPattern=Pattern.compile("^[\'\"](.*)[\'\"]$");
List<String> processedArgs=Lists.newArrayList();
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
Pattern argPattern=Pattern.compile("(--[a-zA-Z_]+)=(.*)");
Pattern quotesPattern=Pattern.newArrayList("^[\'\"](.*)[\'\"]$");
List<String> processedArgs=Lists.newArrayList();
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if((variable_map_output_file.indexOf('[')==-1)||(variable_map_output_file.lastIndexOf(']')==-1)){
throw new ParseException("Syntax error when parsing JS array",true);
}
Pattern argPattern=Pattern.compile("(--[a-zA-Z_]+)=(.*)");
Pattern quotesPattern=Pattern.compile("^[\'\"](.*)[\'\"]$");
List<String> processedArgs=Lists.newArrayList();
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
for(JSModule module : getDependencies()){
Lists.newArrayList().add(module.getName());
}
Pattern argPattern=Pattern.compile("(--[a-zA-Z_]+)=(.*)");
Pattern quotesPattern=Pattern.compile("^[\'\"](.*)[\'\"]$");
List<String> processedArgs=Lists.newArrayList();
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
Pattern argPattern=Pattern.compile("(--[a-zA-Z_]+)=(.*)");
Pattern quotesPattern=Joiner.on("\n").compile("^[\'\"](.*)[\'\"]$");
List<String> processedArgs=Lists.newArrayList();
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
for(JSModule module : getAllModulesInDependencyOrder()){
Lists.newArrayList().addAll(module.getInputs());
}
Pattern argPattern=Pattern.compile("(--[a-zA-Z_]+)=(.*)");
Pattern quotesPattern=Pattern.compile("^[\'\"](.*)[\'\"]$");
List<String> processedArgs=Lists.newArrayList();
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
Pattern argPattern=Pattern.compile("(--[a-zA-Z_]+)=(.*)");
Pattern quotesPattern=Pattern.newArrayListWithExpectedSize("^[\'\"](.*)[\'\"]$");
List<String> processedArgs=Lists.newArrayList();
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(debug){
Lists.newArrayList().add(new FindAbstractMethods());
}
Pattern argPattern=Pattern.compile("(--[a-zA-Z_]+)=(.*)");
Pattern quotesPattern=Pattern.compile("^[\'\"](.*)[\'\"]$");
List<String> processedArgs=Lists.newArrayList();
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(debug){
Lists.newArrayList().add(new FindAssertionCalls());
}
Pattern argPattern=Pattern.compile("(--[a-zA-Z_]+)=(.*)");
Pattern quotesPattern=Pattern.compile("^[\'\"](.*)[\'\"]$");
List<String> processedArgs=Lists.newArrayList();
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
Lists.newArrayList().add(new KeywordAliasSpecification(ALIAS_FALSE,Token.FALSE));
Pattern argPattern=Pattern.compile("(--[a-zA-Z_]+)=(.*)");
Pattern quotesPattern=Pattern.compile("^[\'\"](.*)[\'\"]$");
List<String> processedArgs=Lists.newArrayList();
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
Lists.newArrayList().add(new KeywordAliasSpecification(ALIAS_NULL,Token.NULL));
Pattern argPattern=Pattern.compile("(--[a-zA-Z_]+)=(.*)");
Pattern quotesPattern=Pattern.compile("^[\'\"](.*)[\'\"]$");
List<String> processedArgs=Lists.newArrayList();
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
Lists.newArrayList().add(new KeywordAliasSpecification(ALIAS_TRUE,Token.TRUE));
Pattern argPattern=Pattern.compile("(--[a-zA-Z_]+)=(.*)");
Pattern quotesPattern=Pattern.compile("^[\'\"](.*)[\'\"]$");
List<String> processedArgs=Lists.newArrayList();
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
Lists.newArrayList().add(new ThrowAliasSpecification(ALIAS_THROW));
Pattern argPattern=Pattern.compile("(--[a-zA-Z_]+)=(.*)");
Pattern quotesPattern=Pattern.compile("^[\'\"](.*)[\'\"]$");
List<String> processedArgs=Lists.newArrayList();
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
Pattern argPattern=Pattern.compile("(--[a-zA-Z_]+)=(.*)");
Pattern quotesPattern=Joiner.on(".").compile("^[\'\"](.*)[\'\"]$");
List<String> processedArgs=Lists.newArrayList();
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
Pattern argPattern=Pattern.compile("(--[a-zA-Z_]+)=(.*)");
Pattern quotesPattern=Pattern.join("^[\'\"](.*)[\'\"]$");
List<String> processedArgs=Lists.newArrayList();
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
Lists.newArrayList().add(symbols.get(0));
Pattern argPattern=Pattern.compile("(--[a-zA-Z_]+)=(.*)");
Pattern quotesPattern=Pattern.compile("^[\'\"](.*)[\'\"]$");
List<String> processedArgs=Lists.newArrayList();
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
Modified method com.google.javascript.jscomp.CommandLineRunner:initConfigFromFlags([Ljava/lang/String;Ljava/io/PrintStream;)V at line=409
Modified method com.google.javascript.jscomp.CommandLineRunner:initConfigFromFlags([Ljava/lang/String;Ljava/io/PrintStream;)V at line=410
Modified method com.google.javascript.jscomp.CommandLineRunner:initConfigFromFlags([Ljava/lang/String;Ljava/io/PrintStream;)V at line=411
UNKNOWN ASTNode type : catch (Exception e) {
  Result r=new Result(true);
  r.exceptions.add(e);
  return r;
}

UNKNOWN ASTNode type : catch (Exception e) {
  Result r=new Result(true);
  r.exceptions.add(e);
  return r;
}

UNKNOWN ASTNode type : catch (Exception e) {
  Result r=new Result(true);
  r.exceptions.add(e);
  return r;
}

UNKNOWN ASTNode type : catch (Exception e) {
  Result r=new Result(true);
  r.exceptions.add(e);
  return r;
}

======== PATCH BEGIN ========
case Token.SCRIPT :

if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
module.setDepth(summary_detail_level);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(quotesMatcher.matches()){
requires.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
requires.add(value);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
processedArgs.add(value);
}
-------- PATCH END --------
-------- PROCESSING TESTS BEGIN --------
TESTING single test: com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
TESTING test suite for: closure_83
File modified = com.google.javascript.jscomp.CommandLineRunner from lines 418 to 422
Method modified = com.google.javascript.jscomp.CommandLineRunner:initConfigFromFlags([Ljava/lang/String;Ljava/io/PrintStream;)V
NoneFix detected
-------- PROCESSING TESTS END --------
Test suite failed: /home/ubuntu/repair-tool/simfix/runnable/log/closure/Attempt_2257_mod1_83.tests
======== PATCH BEGIN ========
TRUES.add(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
DEFAULT_EXTERNS_NAMES.add("goog.exportProperty");
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
-------- PATCH END --------
-------- PROCESSING TESTS BEGIN --------
TESTING single test: com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
TESTING test suite for: closure_83
File modified = com.google.javascript.jscomp.CommandLineRunner from lines 418 to 422
Method modified = com.google.javascript.jscomp.CommandLineRunner:initConfigFromFlags([Ljava/lang/String;Ljava/io/PrintStream;)V
NoneFix detected
-------- PROCESSING TESTS END --------
Test suite failed: /home/ubuntu/repair-tool/simfix/runnable/log/closure/Attempt_2275_mod1_83.tests
======== PATCH BEGIN ========
processedArgs.add("google_exportSymbol");
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
-------- PATCH END --------
-------- PROCESSING TESTS BEGIN --------
TESTING single test: com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
TESTING test suite for: closure_83
File modified = com.google.javascript.jscomp.CommandLineRunner from lines 418 to 422
Method modified = com.google.javascript.jscomp.CommandLineRunner:initConfigFromFlags([Ljava/lang/String;Ljava/io/PrintStream;)V
NoneFix detected
-------- PROCESSING TESTS END --------
Test suite failed: /home/ubuntu/repair-tool/simfix/runnable/log/closure/Attempt_2275_mod2_83.tests
======== PATCH BEGIN ========
DEFAULT_EXTERNS_NAMES.add("google_exportProperty");
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
-------- PATCH END --------
-------- PROCESSING TESTS BEGIN --------
TESTING single test: com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
TESTING test suite for: closure_83
File modified = com.google.javascript.jscomp.CommandLineRunner from lines 418 to 422
Method modified = com.google.javascript.jscomp.CommandLineRunner:initConfigFromFlags([Ljava/lang/String;Ljava/io/PrintStream;)V
NoneFix detected
-------- PROCESSING TESTS END --------
Test suite failed: /home/ubuntu/repair-tool/simfix/runnable/log/closure/Attempt_2275_mod3_83.tests
======== PATCH BEGIN ========
DEFAULT_EXTERNS_NAMES.add("goog.exportProperty");
processedArgs.add("google_exportSymbol");
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
-------- PATCH END --------
-------- PROCESSING TESTS BEGIN --------
TESTING single test: com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
TESTING test suite for: closure_83
File modified = com.google.javascript.jscomp.CommandLineRunner from lines 418 to 422
Method modified = com.google.javascript.jscomp.CommandLineRunner:initConfigFromFlags([Ljava/lang/String;Ljava/io/PrintStream;)V
NoneFix detected
-------- PROCESSING TESTS END --------
Test suite failed: /home/ubuntu/repair-tool/simfix/runnable/log/closure/Attempt_2276_mod1_83.tests
======== PATCH BEGIN ========
DEFAULT_EXTERNS_NAMES.add("goog.exportProperty");
DEFAULT_EXTERNS_NAMES.add("google_exportProperty");
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
-------- PATCH END --------
-------- PROCESSING TESTS BEGIN --------
TESTING single test: com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
TESTING test suite for: closure_83
File modified = com.google.javascript.jscomp.CommandLineRunner from lines 418 to 422
Method modified = com.google.javascript.jscomp.CommandLineRunner:initConfigFromFlags([Ljava/lang/String;Ljava/io/PrintStream;)V
NoneFix detected
-------- PROCESSING TESTS END --------
Test suite failed: /home/ubuntu/repair-tool/simfix/runnable/log/closure/Attempt_2276_mod2_83.tests
======== PATCH BEGIN ========
processedArgs.add("google_exportSymbol");
DEFAULT_EXTERNS_NAMES.add("google_exportProperty");
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
-------- PATCH END --------
-------- PROCESSING TESTS BEGIN --------
TESTING single test: com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
TESTING test suite for: closure_83
File modified = com.google.javascript.jscomp.CommandLineRunner from lines 418 to 422
Method modified = com.google.javascript.jscomp.CommandLineRunner:initConfigFromFlags([Ljava/lang/String;Ljava/io/PrintStream;)V
NoneFix detected
-------- PROCESSING TESTS END --------
Test suite failed: /home/ubuntu/repair-tool/simfix/runnable/log/closure/Attempt_2276_mod3_83.tests
======== PATCH BEGIN ========
DEFAULT_EXTERNS_NAMES.add("goog.exportProperty");
processedArgs.add("google_exportSymbol");
DEFAULT_EXTERNS_NAMES.add("google_exportProperty");
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
-------- PATCH END --------
-------- PROCESSING TESTS BEGIN --------
TESTING single test: com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
TESTING test suite for: closure_83
File modified = com.google.javascript.jscomp.CommandLineRunner from lines 418 to 422
Method modified = com.google.javascript.jscomp.CommandLineRunner:initConfigFromFlags([Ljava/lang/String;Ljava/io/PrintStream;)V
NoneFix detected
-------- PROCESSING TESTS END --------
Test suite failed: /home/ubuntu/repair-tool/simfix/runnable/log/closure/Attempt_2276_mod4_83.tests
======== PATCH BEGIN ========
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
TRUES.add(a.oldName);
processedArgs.add(value);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
processedArgs.add(quotesMatcher.group(1)!=null?valueMatcher.group(1):valueMatcher.group(2));
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(quotesMatcher.hitEnd()){
break;
}
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
-------- PATCH END --------
-------- PROCESSING TESTS BEGIN --------
TESTING single test: com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
TESTING test suite for: closure_83
File modified = com.google.javascript.jscomp.CommandLineRunner from lines 418 to 422
Method modified = com.google.javascript.jscomp.CommandLineRunner:initConfigFromFlags([Ljava/lang/String;Ljava/io/PrintStream;)V
NoneFix detected
-------- PROCESSING TESTS END --------
Test suite failed: /home/ubuntu/repair-tool/simfix/runnable/log/closure/Attempt_2295_mod2_83.tests
======== PATCH BEGIN ========
quotesMatcher.reset(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
-------- PATCH END --------
-------- PROCESSING TESTS BEGIN --------
TESTING single test: com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
TESTING test suite for: closure_83
File modified = com.google.javascript.jscomp.CommandLineRunner from lines 418 to 422
Method modified = com.google.javascript.jscomp.CommandLineRunner:initConfigFromFlags([Ljava/lang/String;Ljava/io/PrintStream;)V
NoneFix detected
-------- PROCESSING TESTS END --------
Test suite failed: /home/ubuntu/repair-tool/simfix/runnable/log/closure/Attempt_2415_mod1_83.tests
======== PATCH BEGIN ========
if(quotesMatcher.matches()){
assertionCalls.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
assertionCalls.add(value);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(quotesMatcher.matches()){
break;
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
break;
processedArgs.add(value);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(quotesMatcher.matches()){
hasChanged=true;
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
hasChanged=true;
processedArgs.add(value);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(quotesMatcher.matches()){
externPropertyNames.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
externPropertyNames.add(value);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(quotesMatcher.matches()){
externalNoShadowVariableNames.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
externalNoShadowVariableNames.add(value);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(quotesMatcher.matches()){
noSideEffectFunctionNames.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
noSideEffectFunctionNames.add(value);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(quotesMatcher.matches()){
stringNodesToRename.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
stringNodesToRename.add(value);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(quotesMatcher.matches()){
countPropertyOccurrence(output_wrapper);
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
countPropertyOccurrence(output_wrapper);
processedArgs.add(value);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(quotesMatcher.matches()){
allInstantiatedTypes.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
allInstantiatedTypes.add(value);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(quotesMatcher.matches()){
recordProperty(output_wrapper,value);
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
recordProperty(output_wrapper,value);
processedArgs.add(value);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(quotesMatcher.matches()){
stringNodesToRename.add(quotesMatcher.group(1));
}else {
stringNodesToRename.add(value);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(quotesMatcher.matches()){
allFunctionCalls.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
allFunctionCalls.add(value);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(quotesMatcher.matches()){
orderedWorkSet.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
orderedWorkSet.add(value);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(quotesMatcher.matches()){
reservedNames.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
reservedNames.add(value);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(quotesMatcher.matches()){
return ;
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
return ;
processedArgs.add(value);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(quotesMatcher.matches()){
return Lists.newArrayList();
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(quotesMatcher.matches()){
reads.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
reads.add(value);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(quotesMatcher.matches()){
writes.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
writes.add(value);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(quotesMatcher.matches()){
knownLocals.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
knownLocals.add(value);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(quotesMatcher.matches()){
localVar=true;
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
localVar=true;
processedArgs.add(value);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
lazyInitInfo();
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(info.implementedInterfaces==null){
info.implementedInterfaces=Lists.newArrayListWithCapacity(2);
}
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(output_wrapper);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(quotesMatcher.matches()){
compiler.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
compiler.add(value);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(quotesMatcher.matches()){
TRUES.add(output_wrapper);
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
TRUES.add(output_wrapper);
processedArgs.add(value);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(iVar.name);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
global.uses.add(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(quotesMatcher.matches()){
refInfo.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
refInfo.add(value);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
processedArgs.reportCodeChange();
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(quotesMatcher.matches()){
compiler.add(quotesMatcher.group(1));
}else {
compiler.add(value);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(quotesMatcher.matches()){
return ;
compiler.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(quotesMatcher.matches()){
compiler.add(quotesMatcher.group(1));
}else {
return ;
processedArgs.add(value);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(quotesMatcher.matches()){
return ;
processedArgs.add(quotesMatcher.group(1));
}else {
compiler.add(value);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
return ;
compiler.add(value);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(quotesMatcher.matches()){
return ;
processedArgs.add(quotesMatcher.group(1));
}else {
return ;
processedArgs.add(value);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(quotesMatcher.matches()){
return ;
compiler.add(quotesMatcher.group(1));
}else {
compiler.add(value);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(quotesMatcher.matches()){
compiler.add(quotesMatcher.group(1));
}else {
return ;
compiler.add(value);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(quotesMatcher.matches()){
return ;
compiler.add(quotesMatcher.group(1));
}else {
return ;
processedArgs.add(value);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(quotesMatcher.matches()){
return ;
processedArgs.add(quotesMatcher.group(1));
}else {
return ;
compiler.add(value);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(quotesMatcher.matches()){
return ;
compiler.add(quotesMatcher.group(1));
}else {
return ;
compiler.add(value);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(options.runtimeTypeCheck){
Lists.newArrayList().add(runtimeTypeCheck);
}
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
Lists.newArrayList().add(createEmptyPass("beforeStandardOptimizations"));
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(options.optimizeArgumentsArray){
Lists.newArrayList().add(optimizeArgumentsArray);
}
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(options.collapseProperties){
Lists.newArrayList().add(collapseProperties);
}
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
add(quotesMatcher.getChildAtIndex(1));
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
add(quotesMatcher.getLastChild(),Context.PRESERVE_BLOCK);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
case Token.SCRIPT :

if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
matcher.add("goog.exportSymbol");
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
processedArgs.add("goog.exportProperty");
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
-------- PATCH END --------
-------- PROCESSING TESTS BEGIN --------
TESTING single test: com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
TESTING test suite for: closure_83
File modified = com.google.javascript.jscomp.CommandLineRunner from lines 413 to 425
Method modified = com.google.javascript.jscomp.CommandLineRunner:initConfigFromFlags([Ljava/lang/String;Ljava/io/PrintStream;)V
NoneFix detected
-------- PROCESSING TESTS END --------
Test suite failed: /home/ubuntu/repair-tool/simfix/runnable/log/closure/Attempt_3087_mod2_83.tests
======== PATCH BEGIN ========
matcher.add("google_exportSymbol");
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
processedArgs.add("google_exportProperty");
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
-------- PATCH END --------
-------- PROCESSING TESTS BEGIN --------
TESTING single test: com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
TESTING test suite for: closure_83
File modified = com.google.javascript.jscomp.CommandLineRunner from lines 413 to 425
Method modified = com.google.javascript.jscomp.CommandLineRunner:initConfigFromFlags([Ljava/lang/String;Ljava/io/PrintStream;)V
NoneFix detected
-------- PROCESSING TESTS END --------
Test suite failed: /home/ubuntu/repair-tool/simfix/runnable/log/closure/Attempt_3087_mod4_83.tests
======== PATCH BEGIN ========
processedArgs.add("goog.exportProperty");
processedArgs.add("google_exportProperty");
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
-------- PATCH END --------
-------- PROCESSING TESTS BEGIN --------
TESTING single test: com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
TESTING test suite for: closure_83
File modified = com.google.javascript.jscomp.CommandLineRunner from lines 413 to 425
Method modified = com.google.javascript.jscomp.CommandLineRunner:initConfigFromFlags([Ljava/lang/String;Ljava/io/PrintStream;)V
NoneFix detected
-------- PROCESSING TESTS END --------
Test suite failed: /home/ubuntu/repair-tool/simfix/runnable/log/closure/Attempt_3088_mod1_83.tests
======== PATCH BEGIN ========
if(matcher.matches()){
processedArgs.add(matcher.group(1));
hasDependencies=true;
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
hasDependencies=true;
processedArgs.add(arg);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
if(!matcher.matches()){
throw new ParseException("Invalid arguments to goog.addDependency(). Found: "+quotesMatcher.group(1),true);
}
processedArgs.add(arg);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
hasDependencies=true;
if(!matcher.matches()){
throw new ParseException("Invalid arguments to goog.addDependency(). Found: "+quotesMatcher.group(1),true);
}

processedArgs.add(arg);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(value);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(matcher.matches()){
requires.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
requires.add(arg);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(debug){
add("(");
}
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
add("{");
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
return Lists.newArrayList();
processedArgs.add(arg);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
matcher.reset(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
-------- PATCH END --------
-------- PROCESSING TESTS BEGIN --------
TESTING single test: com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
TESTING test suite for: closure_83
File modified = com.google.javascript.jscomp.CommandLineRunner from lines 413 to 425
Method modified = com.google.javascript.jscomp.CommandLineRunner:initConfigFromFlags([Ljava/lang/String;Ljava/io/PrintStream;)V
NoneFix detected
-------- PROCESSING TESTS END --------
Test suite failed: /home/ubuntu/repair-tool/simfix/runnable/log/closure/Attempt_3109_mod1_83.tests
======== PATCH BEGIN ========
if(matcher.matches()){
prop.typesToSkip.add(value);
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
prop.typesToSkip.add(value);
processedArgs.add(arg);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
matcher.add(a.oldName);
processedArgs.add(arg);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
DEFAULT_EXTERNS_NAMES.add(value);
processedArgs.add(arg);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
if(!debug){
throw new FlagUsageException("Can\'t specify stdin.");
}
processedArgs.add(arg);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
if(debug){
throw new FlagUsageException("Can\'t specify stdin twice.");
}
processedArgs.add(arg);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
usingStdin=true;
processedArgs.add(arg);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
if(!debug){
throw new FlagUsageException("Can\'t specify stdin.");
}
if(debug){
throw new FlagUsageException("Can\'t specify stdin twice.");
}
usingStdin=true;

processedArgs.add(arg);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(matcher.matches()){
assertionCalls.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
assertionCalls.add(arg);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(matcher.matches()){
hasChanged=true;
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
hasChanged=true;
processedArgs.add(arg);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
break;
processedArgs.add(arg);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(matcher.matches()){
externPropertyNames.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
externPropertyNames.add(arg);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(matcher.matches()){
noSideEffectFunctionNames.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
noSideEffectFunctionNames.add(arg);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(matcher.matches()){
stringNodesToRename.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
stringNodesToRename.add(arg);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(matcher.matches()){
countPropertyOccurrence(value);
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
countPropertyOccurrence(value);
processedArgs.add(arg);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(matcher.matches()){
stringNodesToRename.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
stringNodesToRename.add(arg);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(matcher.matches()){
allFunctionCalls.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
allFunctionCalls.add(arg);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(matcher.matches()){
externalNoShadowVariableNames.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
externalNoShadowVariableNames.add(arg);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(matcher.matches()){
allInstantiatedTypes.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
allInstantiatedTypes.add(arg);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(matcher.matches()){
reads.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
reads.add(arg);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(matcher.matches()){
writes.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
writes.add(arg);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(matcher.matches()){
orderedWorkSet.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
orderedWorkSet.add(arg);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(matcher.matches()){
reservedNames.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
reservedNames.add(arg);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
return ;
processedArgs.add(arg);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(matcher.matches()){
knownLocals.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
knownLocals.add(arg);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(matcher.matches()){
localVar=true;
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
localVar=true;
processedArgs.add(arg);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
lazyInitInfo();
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(info.implementedInterfaces==null){
info.implementedInterfaces=Lists.newArrayListWithCapacity(2);
}
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
info.implementedInterfaces.add(value);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(matcher.matches()){
compiler.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
compiler.add(arg);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(matcher.matches()){
TRUES.add(value);
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
TRUES.add(value);
processedArgs.add(arg);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(iVar.name);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(matcher.matches()){
refInfo.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
refInfo.add(arg);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(matcher.matches()){
Preconditions.checkNotNull(value);
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(matcher.matches()){
inlineWellDefinedVariable(candidate.alias,value,candidate.refInfo.references);
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(matcher.matches()){
matcher.add(candidate.alias);
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(matcher.matches()){
Preconditions.checkNotNull(value);
inlineWellDefinedVariable(candidate.alias,value,candidate.refInfo.references);
matcher.add(candidate.alias);

processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
Preconditions.checkNotNull(value);
processedArgs.add(arg);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
inlineWellDefinedVariable(candidate.alias,value,candidate.refInfo.references);
processedArgs.add(arg);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
matcher.add(candidate.alias);
processedArgs.add(arg);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
Preconditions.checkNotNull(value);
inlineWellDefinedVariable(candidate.alias,value,candidate.refInfo.references);
matcher.add(candidate.alias);

processedArgs.add(arg);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(matcher.matches()){
if(matcher.get(value)==null){
moduleFunctions=Lists.newArrayList();
matcher.put(value,matcher.get(value));
}
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
if(matcher.get(value)==null){
moduleFunctions=Lists.newArrayList();
matcher.put(value,matcher.get(value));
}
processedArgs.add(arg);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(matcher.matches()){
matcher.getDirectives().add(value);
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(matcher.matches()){
matcher.setDirectives(matcher.getDirectives());
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(matcher.matches()){
matcher.getDirectives().add(value);
matcher.setDirectives(matcher.getDirectives());

processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(matcher.getType()!=Token.CALL){
return ;
}
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(quotesMatcher.getType()!=Token.GETPROP){
return ;
}
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(matcher.matches()){
mapping.start=new Position(getCurrentLineIndex(),getCurrentCharIndex());
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
mapping.start=new Position(getCurrentLineIndex(),getCurrentCharIndex());
processedArgs.add(arg);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(quotesMatcher==null||var.isLocal()||var.isExtern()){
return ;
}
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(matcher.matches()){
processedArgs.add(matcher.group(1));
quotesMatcher.add(value);
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(matcher.matches()){
Preconditions.checkState(matcher.get(output_wrapper)!=null);
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(matcher.matches()){
matcher.remove(output_wrapper);
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(matcher.matches()){
quotesMatcher.add(value);
Preconditions.checkState(matcher.get(output_wrapper)!=null);
matcher.remove(output_wrapper);

processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
quotesMatcher.add(value);
processedArgs.add(arg);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
Preconditions.checkState(matcher.get(output_wrapper)!=null);
processedArgs.add(arg);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
matcher.remove(output_wrapper);
processedArgs.add(arg);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
quotesMatcher.add(value);
Preconditions.checkState(matcher.get(output_wrapper)!=null);
matcher.remove(output_wrapper);

processedArgs.add(arg);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
matcher.reportCodeChange();
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(matcher.matches()){
compiler.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
compiler.add(arg);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(matcher.matches()){
compiler.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
return ;
processedArgs.add(arg);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
return ;
compiler.add(arg);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(matcher.matches()){
compiler.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
return ;
compiler.add(arg);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.getNativeType(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(summary_detail_level>0){
matcher.appendStringPart(output_wrapper.substring(0,phBegin));
}
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
matcher.appendPlaceholderReference(value);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
Lists.newArrayList().add(createEmptyPass("beforeStandardOptimizations"));
for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(options.optimizeArgumentsArray){
Lists.newArrayList().add(optimizeArgumentsArray);
}
for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(options.collapseProperties){
Lists.newArrayList().add(collapseProperties);
}
for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
Preconditions.checkState(summary_detail_level==3);
for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
add("function");
for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(debug){
add(")");
}
for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
case Token.GET :

for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
add(quotesMatcher.getChildAtIndex(1));
for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
add(quotesMatcher.getLastChild(),Context.PRESERVE_BLOCK);
for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
case Token.SCRIPT :

for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
for(String arg : args){
hasFunctions=true;
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
matcher.find();
for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
add("if(");
for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
add(")");
for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(debug){
quotesMatcher.endBlock();
}
for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
add("{");
for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
matcher.reset(arg);
for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
module.setDepth(summary_detail_level);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
quotesMatcher.put(arg,value);
for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(value==null)Kit.codeBug();
for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
matcher.add(value);
for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
matcher.add(arg);
for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
this.quotesMatcher=options;
for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
matcher.add(new SuppressDocWarningsGuard(getDiagnosticGroups().getRegisteredGroups()));
for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(quotesMatcher.getWarningsGuard()!=null){
matcher.add(quotesMatcher.getWarningsGuard());
}
for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(!options.checkSymbols&&(quotesMatcher.getWarningsGuard()==null||!warningsGuard.disables(DiagnosticGroups.CHECK_VARIABLES))){
matcher.add(new DiagnosticGroupWarningsGuard(DiagnosticGroups.CHECK_VARIABLES,CheckLevel.OFF));
}
for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
this.quotesMatcher.getWarningsGuard()=new ComposeWarningsGuard(matcher);
for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
quotesMatcher.add(null);
for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
processedArgs.add(symbols.get(0));
for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
for(String arg : args){
if(matcher.getType()!=Token.RETURN||matcher.getFirstChild()==null||matcher.getFirstChild().getType()!=Token.THIS){
return ;
}
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
for(String arg : args){
jsName.externallyDefined=true;
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
for(String arg : args){
quotesPattern.add(ns.name);
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
for(String arg : args){
jsName.externallyDefined=true;
quotesPattern.add(ns.name);

Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
lazyInitInfo();
for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
info.suppressions.add(arg);
for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
info.modifies.add(modifies);
for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
DEFAULT_EXTERNS_NAMES.add(formatDetailedMessage(output_wrapper,value,summary_detail_level,arg,summary_detail_level));
for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
for(String arg : args){
Lists.newArrayList().add(value);
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(documentation.sees==null){
documentation.sees=Lists.newArrayList();
}
for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
documentation.sees.add(arg);
for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(documentation.authors==null){
documentation.authors=Lists.newArrayList();
}
for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
documentation.authors.add(arg);
for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(documentation.markers==null){
documentation.markers=Lists.newArrayList();
}
for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
documentation.markers.add(new Marker());
for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
for(String arg : args){
if(quotesMatcher.get(value)==null){
builder=ImmutableSet.builder();
quotesMatcher.put(value,quotesMatcher.get(value));
}
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
for(String arg : args){
quotesMatcher.get(value).add(elem.element);
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
for(String arg : args){
if(quotesMatcher.get(value)==null){
builder=ImmutableSet.builder();
quotesMatcher.put(value,quotesMatcher.get(value));
}
quotesMatcher.get(value).add(elem.element);

Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
for(String arg : args){
node=quotesMatcher.addProperty(output_wrapper.substring(summary_detail_level+1),arg);
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(matcher.getType()!=Token.STRING){
return ;
}
for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
argPattern.add(arg);
for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
matcher.endFile();
for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(matcher.getQualifiedName()==null){
return ;
}
for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(quotesMatcher.getType()!=Token.STRING){
return ;
}
for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(quotesMatcher.getType()!=Token.CALL){
return ;
}
for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(matcher.getType()!=Token.GETPROP){
return ;
}
for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
for(String arg : args){
Matcher matcher=typeRegistry.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
for(String arg : args){
quotesMatcher.addRequiredParams(getNativeType(U2U_CONSTRUCTOR_TYPE));
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
for(String arg : args){
argPattern.add(matcher.getPrototype());
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
for(String arg : args){
quotesMatcher.addRequiredParams(getNativeType(U2U_CONSTRUCTOR_TYPE));
argPattern.add(matcher.getPrototype());

Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(quotesMatcher==null||var.isLocal()||var.isExtern()){
return ;
}
for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
matcher.reportCodeChange();
for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(debug)throw onSeledMutation();
for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
summary_detail_level=N+1;
for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
case STRING :

for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
for(String arg : args){
Matcher matcher=argPattern.getNativeType(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
case NULL :

for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(summary_detail_level<0)Kit.codeBug();
for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
case 1 :

for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
case 3 :

for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
add(quotesMatcher.getChildAtIndex(1));
add(quotesMatcher.getLastChild(),Context.PRESERVE_BLOCK);
for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
add(quotesMatcher.getChildAtIndex(1));
case Token.SCRIPT :

for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
add(quotesMatcher.getLastChild(),Context.PRESERVE_BLOCK);
case Token.SCRIPT :

for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
add(quotesMatcher.getChildAtIndex(1));
add(quotesMatcher.getLastChild(),Context.PRESERVE_BLOCK);
case Token.SCRIPT :

for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
case Token.FUNCTION :

for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
case Token.GETPROP :

for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
case Token.OBJECTLIT :

for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
case Token.STRING :

for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
case Token.GETELEM :

for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
Preconditions.checkState(summary_detail_level==3);
add("function");
for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
Preconditions.checkState(summary_detail_level==3);
if(debug){
add(")");
}
for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
Preconditions.checkState(summary_detail_level==3);
case Token.GET :

for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
add("function");
if(debug){
add(")");
}
for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
add("function");
case Token.GET :

for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(debug){
add(")");
}
case Token.GET :

for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
Preconditions.checkState(summary_detail_level==3);
add("function");
if(debug){
add(")");
}
for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
Preconditions.checkState(summary_detail_level==3);
add("function");
case Token.GET :

for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
Preconditions.checkState(summary_detail_level==3);
if(debug){
add(")");
}
case Token.GET :

for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
add("function");
if(debug){
add(")");
}
case Token.GET :

for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
Preconditions.checkState(summary_detail_level==3);
add("function");
if(debug){
add(")");
}
case Token.GET :

for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
case Token.SETNAME :

for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
Modified method com.google.javascript.jscomp.CommandLineRunner:initConfigFromFlags([Ljava/lang/String;Ljava/io/PrintStream;)V at line=412
Modified method com.google.javascript.jscomp.CommandLineRunner:initConfigFromFlags([Ljava/lang/String;Ljava/io/PrintStream;)V at line=413
Modified method com.google.javascript.jscomp.CommandLineRunner:initConfigFromFlags([Ljava/lang/String;Ljava/io/PrintStream;)V at line=424
Modified method com.google.javascript.jscomp.CommandLineRunner:initConfigFromFlags([Ljava/lang/String;Ljava/io/PrintStream;)V at line=428
======== PATCH BEGIN ========
if(flags.version){
ResourceBundle ResourceBundle.getBundle(configResource)=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
CmdLineParser parser=new CmdLineParser(flags);
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
CmdLineParser parser=new CmdLineParser(flags);
isConfigValid=false;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}
-------- PATCH END --------
-------- PROCESSING TESTS BEGIN --------
TESTING single test: com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
TESTING test suite for: closure_83
File modified = com.google.javascript.jscomp.CommandLineRunner from lines 428 to 435
Method modified = com.google.javascript.jscomp.CommandLineRunner:initConfigFromFlags([Ljava/lang/String;Ljava/io/PrintStream;)V
NoneFix detected
-------- PROCESSING TESTS END --------
Test suite failed: /home/ubuntu/repair-tool/simfix/runnable/log/closure/Attempt_5517_mod1_83.tests
Modified method com.google.javascript.jscomp.CommandLineRunner:initConfigFromFlags([Ljava/lang/String;Ljava/io/PrintStream;)V at line=429
Modified method com.google.javascript.jscomp.CommandLineRunner:initConfigFromFlags([Ljava/lang/String;Ljava/io/PrintStream;)V at line=431
Modified method com.google.javascript.jscomp.CommandLineRunner:initConfigFromFlags([Ljava/lang/String;Ljava/io/PrintStream;)V at line=437
======== PATCH BEGIN ========
TRUES=extractList(config.getString("jsdoc.annotations"));
if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
TRUES=extractList(config.getString("jsdoc.suppressions"));
if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(flags.version){
if(debug){
break;
}
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
varsToDeclareInExterns.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.add("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.name("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
System.err.println("length:"+summary_detail_level);
if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
props.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(flags.version){
new FileOutputStream(configResource).flush();
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(flags.version){
new FileOutputStream(configResource).close();
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(flags.version){
new FileOutputStream(configResource).flush();
new FileOutputStream(configResource).close();

ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.substring("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
compiler.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.checkState("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(flags.version){
add(configResource);
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
consumeToken();
if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
externedNames.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
quotedNames.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
externPropertyNames.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
reservedNames.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
stringNodesToRename.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(flags.version){
countPropertyOccurrence(configResource);
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
case Token.GETPROP :

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if("undefined".equals(configResource)){
return ;
}
if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
-------- PROCESSING TESTS BEGIN --------
TESTING single test: com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
TESTING test suite for: closure_83
File modified = com.google.javascript.jscomp.CommandLineRunner from lines 437 to 444
Method modified = com.google.javascript.jscomp.CommandLineRunner:initConfigFromFlags([Ljava/lang/String;Ljava/io/PrintStream;)V
NoneFix detected
-------- PROCESSING TESTS END --------
Test suite failed: /home/ubuntu/repair-tool/simfix/runnable/log/closure/Attempt_5813_mod1_83.tests
======== PATCH BEGIN ========
if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
callNodeToParentMap.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
newName.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(flags.version){
type=getNativeType(UNKNOWN_TYPE);
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
output_wrapper=config.getString();
if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
symbolGraph.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
debug=false;
if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(null!=null&&info.isConstant()){
debug=true;
}else {
expectedConst=false;
}
if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(flags.version){
summary_detail_level++;
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
globals.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(config.getString().startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
li.referenced=true;
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
Preconditions.checkState(output_wrapper.length()!=0);
if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(config.length()==0){
return ;
}
if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.checkNotNull("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
newName.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.append("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
-------- PROCESSING TESTS BEGIN --------
TESTING single test: com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
TESTING test suite for: closure_83
File modified = com.google.javascript.jscomp.CommandLineRunner from lines 437 to 444
Method modified = com.google.javascript.jscomp.CommandLineRunner:initConfigFromFlags([Ljava/lang/String;Ljava/io/PrintStream;)V
NoneFix detected
-------- PROCESSING TESTS END --------
Test suite failed: /home/ubuntu/repair-tool/simfix/runnable/log/closure/Attempt_5943_mod2_83.tests
======== PATCH BEGIN ========
if(flags.version){
replacement=p.newName;
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(config.getType()!=Token.STRING){
return ;
}
if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
markerStack.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
Preconditions.checkState(args.getType()==Token.LP);
if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
reads.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
writes.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
externMethodsWithoutSignatures.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.checkArgument("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
unknownNameUse.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
config.setUnknown(true);
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.report("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(flags.version){
add("get ");
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(flags.version){
add("set ");
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
allInstantiatedTypes.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
Preconditions.checkState(summary_detail_level==1);
if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.setDesc("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.setIsHidden("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
compiler.report("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
typesToSkip.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
add(".");
if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.setOutputManifest("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
isConfigValid=false;
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
-------- PROCESSING TESTS BEGIN --------
TESTING single test: com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
TESTING test suite for: closure_83
File modified = com.google.javascript.jscomp.CommandLineRunner from lines 437 to 444
Method modified = com.google.javascript.jscomp.CommandLineRunner:initConfigFromFlags([Ljava/lang/String;Ljava/io/PrintStream;)V
NoneFix detected
-------- PROCESSING TESTS END --------
Test suite failed: /home/ubuntu/repair-tool/simfix/runnable/log/closure/Attempt_6165_mod2_83.tests
======== PATCH BEGIN ========
case Token.THIS :

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(flags.version){
if(config!=TernaryValue.UNKNOWN){
int (config.toBoolean(true))?Token.TRUE:Token.FALSE=(config.toBoolean(true))?Token.TRUE:Token.FALSE;
reportCodeChange();
}
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(config.getNext().getType()!=Token.STRING){
return ;
}
if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
case Token.DELPROP :

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
case Token.ASSIGN :

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
Modified method com.google.javascript.jscomp.CommandLineRunner:initConfigFromFlags([Ljava/lang/String;Ljava/io/PrintStream;)V at line=446
Modified method com.google.javascript.jscomp.CommandLineRunner:initConfigFromFlags([Ljava/lang/String;Ljava/io/PrintStream;)V at line=484
Find no block!
Modified method com.google.javascript.jscomp.CommandLineRunner:shouldRunCompiler()Z at line=610
Modified method com.google.javascript.jscomp.AbstractCommandLineRunner:<init>(Ljava/io/PrintStream;Ljava/io/PrintStream;)V at line=113
Find no block!
Modified method com.google.javascript.jscomp.AbstractCommandLineRunner:<init>(Ljava/io/PrintStream;Ljava/io/PrintStream;)V at line=98
Find no block!
Modified method com.google.javascript.jscomp.AbstractCommandLineRunner:<init>(Ljava/io/PrintStream;Ljava/io/PrintStream;)V at line=99
Find no block!
Modified method com.google.javascript.jscomp.AbstractCommandLineRunner:<init>(Ljava/io/PrintStream;Ljava/io/PrintStream;)V at line=100
Find no block!
Modified method com.google.javascript.jscomp.AbstractCommandLineRunner:<init>(Ljava/io/PrintStream;Ljava/io/PrintStream;)V at line=101
Find no block!
Modified method com.google.javascript.jscomp.AbstractCommandLineRunner:<init>(Ljava/io/PrintStream;Ljava/io/PrintStream;)V at line=102
Find no block!
Modified method com.google.javascript.jscomp.AbstractCommandLineRunner:<init>(Ljava/io/PrintStream;Ljava/io/PrintStream;)V at line=107
Find no block!
Modified method com.google.javascript.jscomp.AbstractCommandLineRunner:<init>(Ljava/io/PrintStream;Ljava/io/PrintStream;)V at line=114
UNKNOWN ASTNode type : catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

UNKNOWN ASTNode type : catch (AbstractCommandLineRunner.FlagUsageException e) {
  System.err.println(e.getMessage());
  result=-1;
}

======== PATCH BEGIN ========
outputCharset=options.outputCharset=getOutputCharset();
this.config=new CommandLineConfig();
this.out=out;
this.err=err;
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
inputCharset=getInputCharset();
this.config=new CommandLineConfig();
this.out=out;
this.err=err;
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
this.config=new CommandLineConfig();
this.out=sourceMapDetailLevel;
this.err=err;
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
this.config=new CommandLineConfig();
this.out=out;
this.err=sourceMapFormat;
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
this.config=new CommandLineConfig();
this.out=out;
this.err=jsOutputFile;
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
Modified method com.google.javascript.jscomp.AbstractCommandLineRunner:<init>(Ljava/io/PrintStream;Ljava/io/PrintStream;)V at line=115
Modified method com.google.javascript.jscomp.AbstractCommandLineRunner:<init>(Ljava/io/PrintStream;Ljava/io/PrintStream;)V at line=116
Modified method com.google.javascript.jscomp.AbstractCommandLineRunner:<init>(Ljava/io/PrintStream;Ljava/io/PrintStream;)V at line=117
Find no block!
Modified method com.google.javascript.jscomp.AbstractCommandLineRunner$CommandLineConfig:<init>()V at line=1188
Find no block!
Modified method com.google.javascript.jscomp.AbstractCommandLineRunner$CommandLineConfig:<init>()V at line=1189
Find no block!
Modified method com.google.javascript.jscomp.AbstractCommandLineRunner$CommandLineConfig:<init>()V at line=1197
Find no block!
Modified method com.google.javascript.jscomp.AbstractCommandLineRunner$CommandLineConfig:<init>()V at line=1208
Find no block!
Modified method com.google.javascript.jscomp.AbstractCommandLineRunner$CommandLineConfig:<init>()V at line=1219
Find no block!
Modified method com.google.javascript.jscomp.AbstractCommandLineRunner$CommandLineConfig:<init>()V at line=1227
Find no block!
Modified method com.google.javascript.jscomp.AbstractCommandLineRunner$CommandLineConfig:<init>()V at line=1235
Find no block!
Modified method com.google.javascript.jscomp.AbstractCommandLineRunner$CommandLineConfig:<init>()V at line=1247
Find no block!
Modified method com.google.javascript.jscomp.AbstractCommandLineRunner$CommandLineConfig:<init>()V at line=1258
Find no block!
Modified method com.google.javascript.jscomp.AbstractCommandLineRunner$CommandLineConfig:<init>()V at line=1269
Find no block!
Modified method com.google.javascript.jscomp.AbstractCommandLineRunner$CommandLineConfig:<init>()V at line=1279
Find no block!
Modified method com.google.javascript.jscomp.AbstractCommandLineRunner$CommandLineConfig:<init>()V at line=1295
Find no block!
Modified method com.google.javascript.jscomp.AbstractCommandLineRunner$CommandLineConfig:<init>()V at line=1306
Find no block!
Modified method com.google.javascript.jscomp.AbstractCommandLineRunner$CommandLineConfig:<init>()V at line=1317
Find no block!
Modified method com.google.javascript.jscomp.AbstractCommandLineRunner$CommandLineConfig:<init>()V at line=1328
Find no block!
Modified method com.google.javascript.jscomp.AbstractCommandLineRunner$CommandLineConfig:<init>()V at line=1342
Find no block!
Modified method com.google.javascript.jscomp.AbstractCommandLineRunner$CommandLineConfig:<init>()V at line=1353
Find no block!
Modified method com.google.javascript.jscomp.AbstractCommandLineRunner$CommandLineConfig:<init>()V at line=1363
Find no block!
Modified method com.google.javascript.jscomp.AbstractCommandLineRunner$CommandLineConfig:<init>()V at line=1377
Find no block!
Modified method com.google.javascript.jscomp.AbstractCommandLineRunner$CommandLineConfig:<init>()V at line=1388
Find no block!
Modified method com.google.javascript.jscomp.AbstractCommandLineRunner$CommandLineConfig:<init>()V at line=1399
Find no block!
Modified method com.google.javascript.jscomp.AbstractCommandLineRunner$CommandLineConfig:<init>()V at line=1413
Find no block!
Modified method com.google.javascript.jscomp.AbstractCommandLineRunner$CommandLineConfig:<init>()V at line=1425
Find no block!
Modified method com.google.javascript.jscomp.AbstractCommandLineRunner$CommandLineConfig:<init>()V at line=1439
Find no block!
Modified method com.google.javascript.jscomp.AbstractCommandLineRunner$CommandLineConfig:<init>()V at line=1450
Find no block!
Modified method com.google.javascript.jscomp.AbstractCommandLineRunner$CommandLineConfig:<init>()V at line=1461
Find no block!
Modified method com.google.javascript.jscomp.AbstractCommandLineRunner$CommandLineConfig:<init>()V at line=1472
Find no block!
Modified method com.google.javascript.jscomp.AbstractCommandLineRunner$CommandLineConfig:<init>()V at line=1483
Find no block!
Modified method com.google.javascript.jscomp.AbstractCommandLineRunner$CommandLineConfig:<init>()V at line=1494
Find no block!
Modified method com.google.javascript.jscomp.AbstractCommandLineRunner$CommandLineConfig:<init>()V at line=1509
Find no block!
Modified method com.google.javascript.jscomp.AbstractCommandLineRunner$CommandLineConfig:<init>()V at line=1523
Find no block!
Modified method com.google.javascript.jscomp.AbstractCommandLineRunner$CommandLineConfig:<init>()V at line=1533
Find no block!
Modified method com.google.javascript.jscomp.AbstractCommandLineRunner$CommandLineConfig:<init>()V at line=1543
Find no block!
Modified method com.google.javascript.jscomp.AbstractCommandLineRunner$CommandLineConfig:<init>()V at line=1554
Find no block!
Modified method com.google.javascript.jscomp.AbstractCommandLineRunner$CommandLineConfig:<init>()V at line=1566
Find no block!
Modified method com.google.javascript.jscomp.SourceMap$Format$1:<init>(Ljava/lang/String;I)V at line=35
Find no block!
Modified method com.google.javascript.jscomp.SourceMap$Format$1:<init>(Ljava/lang/String;I)V at line=36
Find no block!
Modified method com.google.javascript.jscomp.SourceMap$Format$2:<init>(Ljava/lang/String;I)V at line=41
Find no block!
Modified method com.google.javascript.jscomp.CompilerOptions$TweakProcessing:<clinit>()V at line=1146
Find no block!
Modified method com.google.javascript.jscomp.CompilerOptions$TweakProcessing:<clinit>()V at line=1147
Find no block!
Modified method com.google.javascript.jscomp.CompilerOptions$TweakProcessing:<clinit>()V at line=1148
Find no block!
Modified method com.google.javascript.jscomp.CompilerOptions$TweakProcessing:<clinit>()V at line=1149
Find no block!
Modified method com.google.javascript.jscomp.CompilerOptions$DevMode:<clinit>()V at line=1114
Find no block!
Modified method com.google.javascript.jscomp.CompilerOptions$DevMode:<clinit>()V at line=1118
Find no block!
Modified method com.google.javascript.jscomp.CompilerOptions$DevMode:<clinit>()V at line=1123
Find no block!
Modified method com.google.javascript.jscomp.CompilerOptions$DevMode:<clinit>()V at line=1128
Find no block!
Modified method com.google.javascript.jscomp.CompilerOptions$DevMode:<clinit>()V at line=1133
Find no block!
Modified method com.google.javascript.jscomp.SourceFile$Preloaded:<init>(Ljava/lang/String;Ljava/lang/String;)V at line=297
Modified method com.google.javascript.jscomp.SourceFile$Preloaded:<init>(Ljava/lang/String;Ljava/lang/String;)V at line=298
Find no block!
Modified method com.google.javascript.jscomp.SourceFile$Preloaded:<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V at line=301
======== PATCH BEGIN ========
this.generator=generator;
super(fileName);
super.setOriginalPath(originalPath);
super.setCode(code);
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
super(fileName);
super.setOriginalPath(code);
super.setCode(code);
-------- PATCH END --------
-------- PROCESSING TESTS BEGIN --------
TESTING single test: com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
TESTING test suite for: closure_83
File modified = com.google.javascript.jscomp.SourceFile from lines 301 to 303
Method modified = com.google.javascript.jscomp.SourceFile$Preloaded:<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
NoneFix detected
-------- PROCESSING TESTS END --------
Test suite failed: /home/ubuntu/repair-tool/simfix/runnable/log/closure/Attempt_6471_mod1_83.tests
Modified method com.google.javascript.jscomp.SourceFile$Preloaded:<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V at line=302
Modified method com.google.javascript.jscomp.SourceFile$Preloaded:<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V at line=303
Modified method com.google.javascript.jscomp.SourceFile$Preloaded:<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V at line=304
Find no block!
Modified method com.google.javascript.jscomp.AbstractCommandLineRunner$RunTimeStats:<init>(Lcom/google/javascript/jscomp/AbstractCommandLineRunner;)V at line=1134
Find no block!
Modified method com.google.javascript.jscomp.AbstractCommandLineRunner$RunTimeStats:<init>(Lcom/google/javascript/jscomp/AbstractCommandLineRunner;)V at line=1135
Find no block!
Modified method com.google.javascript.jscomp.AbstractCommandLineRunner$RunTimeStats:<init>(Lcom/google/javascript/jscomp/AbstractCommandLineRunner;)V at line=1136
Find no block!
Modified method com.google.javascript.jscomp.AbstractCommandLineRunner$RunTimeStats:<init>(Lcom/google/javascript/jscomp/AbstractCommandLineRunner;)V at line=1137
Find no block!
Modified method com.google.javascript.jscomp.AbstractCommandLineRunner$RunTimeStats:<init>(Lcom/google/javascript/jscomp/AbstractCommandLineRunner;)V at line=1138
Find no block!
Modified method com.google.javascript.jscomp.SourceMap$DetailLevel$1:<init>(Ljava/lang/String;I)V at line=55
Find no block!
Modified method com.google.javascript.jscomp.SourceMap$DetailLevel$2:<init>(Ljava/lang/String;I)V at line=62
Find no block!
Modified method com.google.javascript.jscomp.SourceMap$Format$2:<init>(Ljava/lang/String;I)V at line=41
Find no block!
Modified method com.google.javascript.jscomp.SourceMap$Format$1:<init>(Ljava/lang/String;I)V at line=36
Find no block!
Modified method com.google.javascript.jscomp.CompilationLevel:<init>(Ljava/lang/String;I)V at line=49
Find no block!
Modified method com.google.javascript.jscomp.CompilationLevel:<clinit>()V at line=30
Find no block!
Modified method com.google.javascript.jscomp.CompilationLevel:<clinit>()V at line=40
Find no block!
Modified method com.google.javascript.jscomp.CompilationLevel:<clinit>()V at line=46
Find no block!
Modified method com.google.javascript.jscomp.CompilationLevel:<clinit>()V at line=25
Find no block!
Modified method com.google.javascript.jscomp.DefaultCodingConvention:<init>()V at line=32
Find no block!
Modified method com.google.javascript.jscomp.ComposeWarningsGuard:<init>(Ljava/util/List;)V at line=46
Find no block!
Modified method com.google.javascript.jscomp.ComposeWarningsGuard:<init>(Ljava/util/List;)V at line=47
Modified method com.google.javascript.jscomp.ComposeWarningsGuard:<init>(Ljava/util/List;)V at line=48
Modified method com.google.javascript.jscomp.ComposeWarningsGuard:<init>(Ljava/util/List;)V at line=49
Find no block!
Modified method com.google.javascript.jscomp.ComposeWarningsGuard:<init>([Lcom/google/javascript/jscomp/WarningsGuard;)V at line=52
Modified method com.google.javascript.jscomp.ComposeWarningsGuard:<init>([Lcom/google/javascript/jscomp/WarningsGuard;)V at line=53
Find no block!
Modified method com.google.javascript.jscomp.ComposeWarningsGuard$1:<init>()V at line=38
Find no block!
Modified method com.google.javascript.jscomp.ComposeWarningsGuard:addGuard(Lcom/google/javascript/jscomp/WarningsGuard;)V at line=56
======== PATCH BEGIN ========
if(index<DELETED){
index=-index-1;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(L<2)throw new IllegalArgumentException();
if(index<0){
index=-index-1;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(index<=0){
index=-index-1;
}
-------- PATCH END --------
-------- PROCESSING TESTS BEGIN --------
TESTING single test: com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
TESTING test suite for: closure_83
File modified = com.google.javascript.jscomp.ComposeWarningsGuard from lines 61 to 63
Method modified = com.google.javascript.jscomp.ComposeWarningsGuard:addGuard(Lcom/google/javascript/jscomp/WarningsGuard;)V
NoneFix detected
-------- PROCESSING TESTS END --------
Test suite failed: /home/ubuntu/repair-tool/simfix/runnable/log/closure/Attempt_7041_mod1_83.tests
======== PATCH BEGIN ========
if(index<0){
if(keys.length!=N*2){
int[] new int[N*2]=new int[N*2];
keys=new int[N*2];
}
index=-index-1;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(index<0){
index=-index-N-1;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
if(index<EMPTY){
index=-index-1;
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
Modified method com.google.javascript.jscomp.ComposeWarningsGuard:addGuard(Lcom/google/javascript/jscomp/WarningsGuard;)V at line=58
Modified method com.google.javascript.jscomp.ComposeWarningsGuard:addGuard(Lcom/google/javascript/jscomp/WarningsGuard;)V at line=60
Modified method com.google.javascript.jscomp.ComposeWarningsGuard:addGuard(Lcom/google/javascript/jscomp/WarningsGuard;)V at line=61
Modified method com.google.javascript.jscomp.ComposeWarningsGuard:addGuard(Lcom/google/javascript/jscomp/WarningsGuard;)V at line=62
Modified method com.google.javascript.jscomp.ComposeWarningsGuard:addGuard(Lcom/google/javascript/jscomp/WarningsGuard;)V at line=64
Modified method com.google.javascript.jscomp.ComposeWarningsGuard:addGuard(Lcom/google/javascript/jscomp/WarningsGuard;)V at line=66
Find no block!
Modified method com.google.javascript.jscomp.ComposeWarningsGuard:addGuards(Ljava/lang/Iterable;)V at line=69
Modified method com.google.javascript.jscomp.ComposeWarningsGuard:addGuards(Ljava/lang/Iterable;)V at line=70
Modified method com.google.javascript.jscomp.ComposeWarningsGuard:addGuards(Ljava/lang/Iterable;)V at line=71
Find no block!
Modified method com.google.javascript.jscomp.ComposeWarningsGuard:addGuards(Ljava/lang/Iterable;)V at line=72
Find no block!
Modified method com.google.javascript.jscomp.ComposeWarningsGuard:level(Lcom/google/javascript/jscomp/JSError;)Lcom/google/javascript/jscomp/CheckLevel; at line=76
======== PATCH BEGIN ========
if(ref.node.getParent().getType()==Token.EXPR_RESULT){
JSDocInfo ref.node.getJSDocInfo()=ref.node.getJSDocInfo();
if(info!=null&&info.hasTypedefType()){
return ;
}
}
for(WarningsGuard guard : guards){
CheckLevel newLevel=guard.level(error);
if(newLevel!=null){
return newLevel;
}
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
======== PATCH BEGIN ========
guards.add(new SuppressDocWarningsGuard(getDiagnosticGroups().getRegisteredGroups()));
for(WarningsGuard guard : guards){
CheckLevel newLevel=guard.level(error);
if(newLevel!=null){
return newLevel;
}
}
-------- PATCH END --------
Build failed !
Compilation failed, skipping tests
Modified method com.google.javascript.jscomp.ComposeWarningsGuard:level(Lcom/google/javascript/jscomp/JSError;)Lcom/google/javascript/jscomp/CheckLevel; at line=77
Modified method com.google.javascript.jscomp.ComposeWarningsGuard:level(Lcom/google/javascript/jscomp/JSError;)Lcom/google/javascript/jscomp/CheckLevel; at line=78
Failed to repair!
Writing profl final results to /home/ubuntu/repair-tool/simfix/runnable/proflResults/closure_83/aggregatedSusInfo.profl
[NOT] Removing directory
|------------------------------------------------------|
|------------------------Finish------------------------|
  Summary:
   * log file:
      ./runnable/log/closure/83.txt
   * patch folder (if success):
      ./runnable/patch/closure/83
