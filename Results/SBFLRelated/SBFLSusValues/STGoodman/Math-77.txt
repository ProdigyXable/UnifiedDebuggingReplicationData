org.apache.commons.math.linear.RealVector$Entry.<init>()V  -0.5
org.apache.commons.math.linear.ArrayRealVector.<init>([D)V  -0.9682539682539683
org.apache.commons.math.linear.ArrayRealVector.getNorm()D  -0.7333333333333333
org.apache.commons.math.linear.ArrayRealVector.getL1Norm()D  0.3333333333333333
org.apache.commons.math.linear.ArrayRealVector.getLInfNorm()D  0.3333333333333333
org.apache.commons.math.linear.OpenMapRealVector$OpenMapEntry.<init>(Lorg/apache/commons/math/linear/OpenMapRealVector;Lorg/apache/commons/math/util/OpenIntToDoubleHashMap$Iterator;)V  0.0
org.apache.commons.math.linear.OpenMapRealVector$OpenMapEntry.getValue()D  0.0
org.apache.commons.math.linear.OpenMapRealVector$OpenMapSparseIterator.<init>(Lorg/apache/commons/math/linear/OpenMapRealVector;)V  0.0
org.apache.commons.math.linear.OpenMapRealVector$OpenMapSparseIterator.hasNext()Z  0.0
org.apache.commons.math.linear.OpenMapRealVector$OpenMapSparseIterator.next()Lorg/apache/commons/math/linear/RealVector$Entry;  0.0
org.apache.commons.math.linear.OpenMapRealVector.<init>([D)V  -0.5555555555555556
org.apache.commons.math.linear.OpenMapRealVector.<init>([DD)V  -0.5555555555555556
org.apache.commons.math.linear.OpenMapRealVector.isDefaultValue(D)Z  -0.5555555555555556
org.apache.commons.math.linear.OpenMapRealVector.getLInfNorm()D  0.3333333333333333
org.apache.commons.math.linear.OpenMapRealVector.sparseIterator()Ljava/util/Iterator;  0.0
org.apache.commons.math.linear.OpenMapRealVector.access$000(Lorg/apache/commons/math/linear/OpenMapRealVector;)Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;  0.0
org.apache.commons.math.linear.AbstractRealVector.<init>()V  -0.9565217391304348
org.apache.commons.math.linear.AbstractRealVector.getNorm()D  0.3333333333333333
org.apache.commons.math.linear.AbstractRealVector.getL1Norm()D  0.3333333333333333
org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator.<init>(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V  -0.7777777777777778
org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator.hasNext()Z  -0.7647058823529411
org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator.value()D  -0.7647058823529411
org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator.advance()V  -0.7647058823529411
org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator.<init>(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;Lorg/apache/commons/math/util/OpenIntToDoubleHashMap$1;)V  -0.7777777777777778
org.apache.commons.math.util.OpenIntToDoubleHashMap.<init>(D)V  -0.8888888888888888
org.apache.commons.math.util.OpenIntToDoubleHashMap.<init>(ID)V  -0.9245283018867925
org.apache.commons.math.util.OpenIntToDoubleHashMap.computeCapacity(I)I  -0.9215686274509803
org.apache.commons.math.util.OpenIntToDoubleHashMap.iterator()Lorg/apache/commons/math/util/OpenIntToDoubleHashMap$Iterator;  -0.7777777777777778
org.apache.commons.math.util.OpenIntToDoubleHashMap.findInsertionIndex(I)I  -0.9215686274509803
org.apache.commons.math.util.OpenIntToDoubleHashMap.findInsertionIndex([I[BII)I  -0.9215686274509803
org.apache.commons.math.util.OpenIntToDoubleHashMap.put(ID)D  -0.9215686274509803
org.apache.commons.math.util.OpenIntToDoubleHashMap.shouldGrowTable()Z  -0.9215686274509803
org.apache.commons.math.util.OpenIntToDoubleHashMap.hashOf(I)I  -0.9245283018867925
org.apache.commons.math.util.OpenIntToDoubleHashMap.access$100(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)I  -0.7777777777777778
org.apache.commons.math.util.OpenIntToDoubleHashMap.access$300(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)[D  -0.7647058823529411
org.apache.commons.math.util.OpenIntToDoubleHashMap.access$400(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)[B  -0.7777777777777778
