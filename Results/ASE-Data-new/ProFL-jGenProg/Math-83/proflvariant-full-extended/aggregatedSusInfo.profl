001|1000.000000|PatchCategory.NoneFix|org.apache.commons.math.optimization.linear.AbstractLinearOptimizer:incrementIterationsCounter()
001|1000.000000|PatchCategory.NoneFix|org.apache.commons.math.optimization.linear.AbstractLinearOptimizer:optimize(Lorg/apache/commons/math/optimization/linear/LinearObjectiveFunction;Ljava/util/Collection;Lorg/apache/commons/math/optimization/GoalType;Z)Lorg/apache/commons/math/optimization/RealPointValuePair
001|1000.000000|PatchCategory.NoneFix|org.apache.commons.math.optimization.linear.SimplexSolver:doIteration(Lorg/apache/commons/math/optimization/linear/SimplexTableau;)
001|1000.000000|PatchCategory.NoneFix|org.apache.commons.math.optimization.linear.SimplexSolver:getPivotColumn(Lorg/apache/commons/math/optimization/linear/SimplexTableau;)Ljava/lang/Integer
001|1000.000000|PatchCategory.NoneFix|org.apache.commons.math.optimization.linear.SimplexSolver:getPivotRow(ILorg/apache/commons/math/optimization/linear/SimplexTableau;)Ljava/lang/Integer
001|1000.000000|PatchCategory.NoneFix|org.apache.commons.math.optimization.linear.SimplexSolver:isOptimal(Lorg/apache/commons/math/optimization/linear/SimplexTableau;)
001|1000.000000|PatchCategory.NoneFix|org.apache.commons.math.optimization.linear.SimplexSolver:isPhase1Solved(Lorg/apache/commons/math/optimization/linear/SimplexTableau;)
001|1000.000000|PatchCategory.NoneFix|org.apache.commons.math.optimization.linear.SimplexSolver:solvePhase1(Lorg/apache/commons/math/optimization/linear/SimplexTableau;)
001|1000.000000|PatchCategory.NoneFix|org.apache.commons.math.optimization.linear.SimplexTableau:createTableau(Z)[[
001|1000.000000|PatchCategory.NoneFix|org.apache.commons.math.optimization.linear.SimplexTableau:discardArtificialVariables()
001|1000.000000|PatchCategory.NoneFix|org.apache.commons.math.optimization.linear.SimplexTableau:divideRow(ID)
001|1000.000000|PatchCategory.NegFix|org.apache.commons.math.optimization.linear.SimplexTableau:subtractRow(IID)
001|1000.000000|PatchCategory.NegFix|org.apache.commons.math.util.MathUtils:compareTo(DDD)
